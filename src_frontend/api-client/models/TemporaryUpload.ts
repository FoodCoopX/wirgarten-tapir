/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { UploadTypeEnum } from "./UploadTypeEnum";
import { UploadTypeEnumFromJSON, UploadTypeEnumToJSON } from "./UploadTypeEnum";

/**
 *
 * @export
 * @interface TemporaryUpload
 */
export interface TemporaryUpload {
  /**
   *
   * @type {string}
   * @memberof TemporaryUpload
   */
  uploadId: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryUpload
   */
  fileName: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryUpload
   */
  fileId: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryUpload
   */
  file: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryUpload
   */
  uploadName: string;
  /**
   *
   * @type {Date}
   * @memberof TemporaryUpload
   */
  readonly uploaded: Date;
  /**
   *
   * @type {UploadTypeEnum}
   * @memberof TemporaryUpload
   */
  uploadType: UploadTypeEnum;
  /**
   *
   * @type {string}
   * @memberof TemporaryUpload
   */
  uploadedBy?: string | null;
}

/**
 * Check if a given object implements the TemporaryUpload interface.
 */
export function instanceOfTemporaryUpload(
  value: object,
): value is TemporaryUpload {
  if (!("uploadId" in value) || value["uploadId"] === undefined) return false;
  if (!("fileName" in value) || value["fileName"] === undefined) return false;
  if (!("fileId" in value) || value["fileId"] === undefined) return false;
  if (!("file" in value) || value["file"] === undefined) return false;
  if (!("uploadName" in value) || value["uploadName"] === undefined)
    return false;
  if (!("uploaded" in value) || value["uploaded"] === undefined) return false;
  if (!("uploadType" in value) || value["uploadType"] === undefined)
    return false;
  return true;
}

export function TemporaryUploadFromJSON(json: any): TemporaryUpload {
  return TemporaryUploadFromJSONTyped(json, false);
}

export function TemporaryUploadFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TemporaryUpload {
  if (json == null) {
    return json;
  }
  return {
    uploadId: json["upload_id"],
    fileName: json["file_name"],
    fileId: json["file_id"],
    file: json["file"],
    uploadName: json["upload_name"],
    uploaded: new Date(json["uploaded"]),
    uploadType: UploadTypeEnumFromJSON(json["upload_type"]),
    uploadedBy: json["uploaded_by"] == null ? undefined : json["uploaded_by"],
  };
}

export function TemporaryUploadToJSON(json: any): TemporaryUpload {
  return TemporaryUploadToJSONTyped(json, false);
}

export function TemporaryUploadToJSONTyped(
  value?: Omit<TemporaryUpload, "uploaded"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    upload_id: value["uploadId"],
    file_name: value["fileName"],
    file_id: value["fileId"],
    file: value["file"],
    upload_name: value["uploadName"],
    upload_type: UploadTypeEnumToJSON(value["uploadType"]),
    uploaded_by: value["uploadedBy"],
  };
}
