/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PreferredLanguageEnum } from './PreferredLanguageEnum';
import {
    PreferredLanguageEnumFromJSON,
    PreferredLanguageEnumFromJSONTyped,
    PreferredLanguageEnumToJSON,
    PreferredLanguageEnumToJSONTyped,
} from './PreferredLanguageEnum';
import type { MemberCountry } from './MemberCountry';
import {
    MemberCountryFromJSON,
    MemberCountryFromJSONTyped,
    MemberCountryToJSON,
    MemberCountryToJSONTyped,
} from './MemberCountry';

/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    password: string;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    lastLogin?: Date | null;
    /**
     * Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
     * @type {boolean}
     * @memberof Member
     */
    isSuperuser?: boolean;
    /**
     * Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
     * @type {string}
     * @memberof Member
     */
    username: string;
    /**
     * Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
     * @type {boolean}
     * @memberof Member
     */
    isStaff?: boolean;
    /**
     * Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
     * @type {boolean}
     * @memberof Member
     */
    isActive?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    dateJoined?: Date;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    keycloakId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    birthdate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    street2?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    postcode?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    city?: string;
    /**
     * 
     * @type {MemberCountry}
     * @memberof Member
     */
    country?: MemberCountry;
    /**
     * 
     * @type {PreferredLanguageEnum}
     * @memberof Member
     */
    preferredLanguage?: PreferredLanguageEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    accountOwner?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    iban?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    sepaConsent?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    withdrawalConsent?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    privacyConsent?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    memberNo?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    isStudent?: boolean;
    /**
     * Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
     * @type {Array<number>}
     * @memberof Member
     */
    groups?: Array<number>;
    /**
     * Spezifische Berechtigungen für diesen Benutzer.
     * @type {Array<number>}
     * @memberof Member
     */
    userPermissions?: Array<number>;
}



/**
 * Check if a given object implements the Member interface.
 */
export function instanceOfMember(value: object): value is Member {
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function MemberFromJSON(json: any): Member {
    return MemberFromJSONTyped(json, false);
}

export function MemberFromJSONTyped(json: any, ignoreDiscriminator: boolean): Member {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'password': json['password'],
        'lastLogin': json['last_login'] == null ? undefined : (new Date(json['last_login'])),
        'isSuperuser': json['is_superuser'] == null ? undefined : json['is_superuser'],
        'username': json['username'],
        'isStaff': json['is_staff'] == null ? undefined : json['is_staff'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'dateJoined': json['date_joined'] == null ? undefined : (new Date(json['date_joined'])),
        'keycloakId': json['keycloak_id'] == null ? undefined : json['keycloak_id'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'email': json['email'] == null ? undefined : json['email'],
        'phoneNumber': json['phone_number'] == null ? undefined : json['phone_number'],
        'birthdate': json['birthdate'] == null ? undefined : (new Date(json['birthdate'])),
        'street': json['street'] == null ? undefined : json['street'],
        'street2': json['street_2'] == null ? undefined : json['street_2'],
        'postcode': json['postcode'] == null ? undefined : json['postcode'],
        'city': json['city'] == null ? undefined : json['city'],
        'country': json['country'] == null ? undefined : MemberCountryFromJSON(json['country']),
        'preferredLanguage': json['preferred_language'] == null ? undefined : PreferredLanguageEnumFromJSON(json['preferred_language']),
        'accountOwner': json['account_owner'] == null ? undefined : json['account_owner'],
        'iban': json['iban'] == null ? undefined : json['iban'],
        'sepaConsent': json['sepa_consent'] == null ? undefined : (new Date(json['sepa_consent'])),
        'withdrawalConsent': json['withdrawal_consent'] == null ? undefined : (new Date(json['withdrawal_consent'])),
        'privacyConsent': json['privacy_consent'] == null ? undefined : (new Date(json['privacy_consent'])),
        'createdAt': (new Date(json['created_at'])),
        'memberNo': json['member_no'] == null ? undefined : json['member_no'],
        'isStudent': json['is_student'] == null ? undefined : json['is_student'],
        'groups': json['groups'] == null ? undefined : json['groups'],
        'userPermissions': json['user_permissions'] == null ? undefined : json['user_permissions'],
    };
}

  export function MemberToJSON(json: any): Member {
      return MemberToJSONTyped(json, false);
  }

  export function MemberToJSONTyped(value?: Omit<Member, 'created_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'password': value['password'],
        'last_login': value['lastLogin'] == null ? undefined : ((value['lastLogin'] as any).toISOString()),
        'is_superuser': value['isSuperuser'],
        'username': value['username'],
        'is_staff': value['isStaff'],
        'is_active': value['isActive'],
        'date_joined': value['dateJoined'] == null ? undefined : ((value['dateJoined']).toISOString()),
        'keycloak_id': value['keycloakId'],
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'email': value['email'],
        'phone_number': value['phoneNumber'],
        'birthdate': value['birthdate'] == null ? undefined : ((value['birthdate'] as any).toISOString().substring(0,10)),
        'street': value['street'],
        'street_2': value['street2'],
        'postcode': value['postcode'],
        'city': value['city'],
        'country': MemberCountryToJSON(value['country']),
        'preferred_language': PreferredLanguageEnumToJSON(value['preferredLanguage']),
        'account_owner': value['accountOwner'],
        'iban': value['iban'],
        'sepa_consent': value['sepaConsent'] == null ? undefined : ((value['sepaConsent'] as any).toISOString()),
        'withdrawal_consent': value['withdrawalConsent'] == null ? undefined : ((value['withdrawalConsent'] as any).toISOString()),
        'privacy_consent': value['privacyConsent'] == null ? undefined : ((value['privacyConsent'] as any).toISOString()),
        'member_no': value['memberNo'],
        'is_student': value['isStudent'],
        'groups': value['groups'],
        'user_permissions': value['userPermissions'],
    };
}

