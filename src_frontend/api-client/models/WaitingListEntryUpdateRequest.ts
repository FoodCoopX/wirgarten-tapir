/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WaitingListEntryUpdateRequest
 */
export interface WaitingListEntryUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    phoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    street: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    street2: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    postcode: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    city: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WaitingListEntryUpdateRequest
     */
    pickupLocationIds: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WaitingListEntryUpdateRequest
     */
    productIds: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof WaitingListEntryUpdateRequest
     */
    productQuantities: Array<number>;
    /**
     * 
     * @type {Date}
     * @memberof WaitingListEntryUpdateRequest
     */
    desiredStartDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    comment: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntryUpdateRequest
     */
    category?: string;
}

/**
 * Check if a given object implements the WaitingListEntryUpdateRequest interface.
 */
export function instanceOfWaitingListEntryUpdateRequest(value: object): value is WaitingListEntryUpdateRequest {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('street' in value) || value['street'] === undefined) return false;
    if (!('street2' in value) || value['street2'] === undefined) return false;
    if (!('postcode' in value) || value['postcode'] === undefined) return false;
    if (!('city' in value) || value['city'] === undefined) return false;
    if (!('pickupLocationIds' in value) || value['pickupLocationIds'] === undefined) return false;
    if (!('productIds' in value) || value['productIds'] === undefined) return false;
    if (!('productQuantities' in value) || value['productQuantities'] === undefined) return false;
    if (!('comment' in value) || value['comment'] === undefined) return false;
    return true;
}

export function WaitingListEntryUpdateRequestFromJSON(json: any): WaitingListEntryUpdateRequest {
    return WaitingListEntryUpdateRequestFromJSONTyped(json, false);
}

export function WaitingListEntryUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitingListEntryUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'email': json['email'],
        'phoneNumber': json['phone_number'],
        'street': json['street'],
        'street2': json['street_2'],
        'postcode': json['postcode'],
        'city': json['city'],
        'pickupLocationIds': json['pickup_location_ids'],
        'productIds': json['product_ids'],
        'productQuantities': json['product_quantities'],
        'desiredStartDate': json['desired_start_date'] == null ? undefined : (new Date(json['desired_start_date'])),
        'comment': json['comment'],
        'category': json['category'] == null ? undefined : json['category'],
    };
}

  export function WaitingListEntryUpdateRequestToJSON(json: any): WaitingListEntryUpdateRequest {
      return WaitingListEntryUpdateRequestToJSONTyped(json, false);
  }

  export function WaitingListEntryUpdateRequestToJSONTyped(value?: WaitingListEntryUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'email': value['email'],
        'phone_number': value['phoneNumber'],
        'street': value['street'],
        'street_2': value['street2'],
        'postcode': value['postcode'],
        'city': value['city'],
        'pickup_location_ids': value['pickupLocationIds'],
        'product_ids': value['productIds'],
        'product_quantities': value['productQuantities'],
        'desired_start_date': value['desiredStartDate'] == null ? undefined : ((value['desiredStartDate']).toISOString().substring(0,10)),
        'comment': value['comment'],
        'category': value['category'],
    };
}

