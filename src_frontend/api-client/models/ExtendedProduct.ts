/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductBasketSizeEquivalence } from './ProductBasketSizeEquivalence';
import {
    ProductBasketSizeEquivalenceFromJSON,
    ProductBasketSizeEquivalenceFromJSONTyped,
    ProductBasketSizeEquivalenceToJSON,
    ProductBasketSizeEquivalenceToJSONTyped,
} from './ProductBasketSizeEquivalence';
import type { PickingModeEnum } from './PickingModeEnum';
import {
    PickingModeEnumFromJSON,
    PickingModeEnumFromJSONTyped,
    PickingModeEnumToJSON,
    PickingModeEnumToJSONTyped,
} from './PickingModeEnum';

/**
 * 
 * @export
 * @interface ExtendedProduct
 */
export interface ExtendedProduct {
    /**
     * 
     * @type {string}
     * @memberof ExtendedProduct
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ExtendedProduct
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedProduct
     */
    deleted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedProduct
     */
    base: boolean;
    /**
     * 
     * @type {number}
     * @memberof ExtendedProduct
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof ExtendedProduct
     */
    size: number;
    /**
     * 
     * @type {Array<ProductBasketSizeEquivalence>}
     * @memberof ExtendedProduct
     */
    basketSizeEquivalences: Array<ProductBasketSizeEquivalence>;
    /**
     * 
     * @type {string}
     * @memberof ExtendedProduct
     */
    growingPeriodId?: string;
    /**
     * 
     * @type {PickingModeEnum}
     * @memberof ExtendedProduct
     */
    readonly pickingMode: PickingModeEnum;
}



/**
 * Check if a given object implements the ExtendedProduct interface.
 */
export function instanceOfExtendedProduct(value: object): value is ExtendedProduct {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('deleted' in value) || value['deleted'] === undefined) return false;
    if (!('base' in value) || value['base'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('basketSizeEquivalences' in value) || value['basketSizeEquivalences'] === undefined) return false;
    if (!('pickingMode' in value) || value['pickingMode'] === undefined) return false;
    return true;
}

export function ExtendedProductFromJSON(json: any): ExtendedProduct {
    return ExtendedProductFromJSONTyped(json, false);
}

export function ExtendedProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtendedProduct {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'deleted': json['deleted'],
        'base': json['base'],
        'price': json['price'],
        'size': json['size'],
        'basketSizeEquivalences': ((json['basket_size_equivalences'] as Array<any>).map(ProductBasketSizeEquivalenceFromJSON)),
        'growingPeriodId': json['growing_period_id'] == null ? undefined : json['growing_period_id'],
        'pickingMode': PickingModeEnumFromJSON(json['picking_mode']),
    };
}

  export function ExtendedProductToJSON(json: any): ExtendedProduct {
      return ExtendedProductToJSONTyped(json, false);
  }

  export function ExtendedProductToJSONTyped(value?: Omit<ExtendedProduct, 'picking_mode'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'deleted': value['deleted'],
        'base': value['base'],
        'price': value['price'],
        'size': value['size'],
        'basket_size_equivalences': ((value['basketSizeEquivalences'] as Array<any>).map(ProductBasketSizeEquivalenceToJSON)),
        'growing_period_id': value['growingPeriodId'],
    };
}

