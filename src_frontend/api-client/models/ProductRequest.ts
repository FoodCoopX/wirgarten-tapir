/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductTypeRequest } from './ProductTypeRequest';
import {
    ProductTypeRequestFromJSON,
    ProductTypeRequestFromJSONTyped,
    ProductTypeRequestToJSON,
    ProductTypeRequestToJSONTyped,
} from './ProductTypeRequest';

/**
 * 
 * @export
 * @interface ProductRequest
 */
export interface ProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductRequest
     */
    id?: string;
    /**
     * 
     * @type {ProductTypeRequest}
     * @memberof ProductRequest
     */
    type: ProductTypeRequest;
    /**
     * 
     * @type {string}
     * @memberof ProductRequest
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductRequest
     */
    deleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductRequest
     */
    base?: boolean | null;
}

/**
 * Check if a given object implements the ProductRequest interface.
 */
export function instanceOfProductRequest(value: object): value is ProductRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ProductRequestFromJSON(json: any): ProductRequest {
    return ProductRequestFromJSONTyped(json, false);
}

export function ProductRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': ProductTypeRequestFromJSON(json['type']),
        'name': json['name'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'base': json['base'] == null ? undefined : json['base'],
    };
}

  export function ProductRequestToJSON(json: any): ProductRequest {
      return ProductRequestToJSONTyped(json, false);
  }

  export function ProductRequestToJSONTyped(value?: ProductRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': ProductTypeRequestToJSON(value['type']),
        'name': value['name'],
        'deleted': value['deleted'],
        'base': value['base'],
    };
}

