/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PickupLocation } from './PickupLocation';
import {
    PickupLocationFromJSON,
    PickupLocationFromJSONTyped,
    PickupLocationToJSON,
    PickupLocationToJSONTyped,
} from './PickupLocation';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
    ProductToJSONTyped,
} from './Product';

/**
 * 
 * @export
 * @interface WaitingListEntry
 */
export interface WaitingListEntry {
    /**
     * 
     * @type {number}
     * @memberof WaitingListEntry
     */
    memberNo: number;
    /**
     * 
     * @type {Date}
     * @memberof WaitingListEntry
     */
    waitingSince: Date;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    emailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    phoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    street: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    street2: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    postCode: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof WaitingListEntry
     */
    country: string;
    /**
     * 
     * @type {Date}
     * @memberof WaitingListEntry
     */
    dateOfEntryInCooperative: Date;
    /**
     * 
     * @type {PickupLocation}
     * @memberof WaitingListEntry
     */
    currentPickupLocation?: PickupLocation;
    /**
     * 
     * @type {Array<PickupLocation>}
     * @memberof WaitingListEntry
     */
    pickupLocationWishes?: Array<PickupLocation>;
    /**
     * 
     * @type {Array<Product>}
     * @memberof WaitingListEntry
     */
    productWishes?: Array<Product>;
    /**
     * 
     * @type {Date}
     * @memberof WaitingListEntry
     */
    desiredStartDate: Date;
}

/**
 * Check if a given object implements the WaitingListEntry interface.
 */
export function instanceOfWaitingListEntry(value: object): value is WaitingListEntry {
    if (!('memberNo' in value) || value['memberNo'] === undefined) return false;
    if (!('waitingSince' in value) || value['waitingSince'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('emailAddress' in value) || value['emailAddress'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('street' in value) || value['street'] === undefined) return false;
    if (!('street2' in value) || value['street2'] === undefined) return false;
    if (!('postCode' in value) || value['postCode'] === undefined) return false;
    if (!('city' in value) || value['city'] === undefined) return false;
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('dateOfEntryInCooperative' in value) || value['dateOfEntryInCooperative'] === undefined) return false;
    if (!('desiredStartDate' in value) || value['desiredStartDate'] === undefined) return false;
    return true;
}

export function WaitingListEntryFromJSON(json: any): WaitingListEntry {
    return WaitingListEntryFromJSONTyped(json, false);
}

export function WaitingListEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitingListEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'memberNo': json['member_no'],
        'waitingSince': (new Date(json['waiting_since'])),
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'emailAddress': json['email_address'],
        'phoneNumber': json['phone_number'],
        'street': json['street'],
        'street2': json['street_2'],
        'postCode': json['post_code'],
        'city': json['city'],
        'country': json['country'],
        'dateOfEntryInCooperative': (new Date(json['date_of_entry_in_cooperative'])),
        'currentPickupLocation': json['current_pickup_location'] == null ? undefined : PickupLocationFromJSON(json['current_pickup_location']),
        'pickupLocationWishes': json['pickup_location_wishes'] == null ? undefined : ((json['pickup_location_wishes'] as Array<any>).map(PickupLocationFromJSON)),
        'productWishes': json['product_wishes'] == null ? undefined : ((json['product_wishes'] as Array<any>).map(ProductFromJSON)),
        'desiredStartDate': (new Date(json['desired_start_date'])),
    };
}

  export function WaitingListEntryToJSON(json: any): WaitingListEntry {
      return WaitingListEntryToJSONTyped(json, false);
  }

  export function WaitingListEntryToJSONTyped(value?: WaitingListEntry | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'member_no': value['memberNo'],
        'waiting_since': ((value['waitingSince']).toISOString()),
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'email_address': value['emailAddress'],
        'phone_number': value['phoneNumber'],
        'street': value['street'],
        'street_2': value['street2'],
        'post_code': value['postCode'],
        'city': value['city'],
        'country': value['country'],
        'date_of_entry_in_cooperative': ((value['dateOfEntryInCooperative']).toISOString().substring(0,10)),
        'current_pickup_location': PickupLocationToJSON(value['currentPickupLocation']),
        'pickup_location_wishes': value['pickupLocationWishes'] == null ? undefined : ((value['pickupLocationWishes'] as Array<any>).map(PickupLocationToJSON)),
        'product_wishes': value['productWishes'] == null ? undefined : ((value['productWishes'] as Array<any>).map(ProductToJSON)),
        'desired_start_date': ((value['desiredStartDate']).toISOString().substring(0,10)),
    };
}

