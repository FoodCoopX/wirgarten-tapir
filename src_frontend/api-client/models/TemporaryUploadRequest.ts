/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UploadTypeEnum } from './UploadTypeEnum';
import {
    UploadTypeEnumFromJSON,
    UploadTypeEnumFromJSONTyped,
    UploadTypeEnumToJSON,
    UploadTypeEnumToJSONTyped,
} from './UploadTypeEnum';

/**
 * 
 * @export
 * @interface TemporaryUploadRequest
 */
export interface TemporaryUploadRequest {
    /**
     * 
     * @type {string}
     * @memberof TemporaryUploadRequest
     */
    uploadId: string;
    /**
     * 
     * @type {string}
     * @memberof TemporaryUploadRequest
     */
    fileName: string;
    /**
     * 
     * @type {string}
     * @memberof TemporaryUploadRequest
     */
    fileId: string;
    /**
     * 
     * @type {Blob}
     * @memberof TemporaryUploadRequest
     */
    file: Blob;
    /**
     * 
     * @type {string}
     * @memberof TemporaryUploadRequest
     */
    uploadName: string;
    /**
     * 
     * @type {UploadTypeEnum}
     * @memberof TemporaryUploadRequest
     */
    uploadType: UploadTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TemporaryUploadRequest
     */
    uploadedBy?: string | null;
}



/**
 * Check if a given object implements the TemporaryUploadRequest interface.
 */
export function instanceOfTemporaryUploadRequest(value: object): value is TemporaryUploadRequest {
    if (!('uploadId' in value) || value['uploadId'] === undefined) return false;
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    if (!('fileId' in value) || value['fileId'] === undefined) return false;
    if (!('file' in value) || value['file'] === undefined) return false;
    if (!('uploadName' in value) || value['uploadName'] === undefined) return false;
    if (!('uploadType' in value) || value['uploadType'] === undefined) return false;
    return true;
}

export function TemporaryUploadRequestFromJSON(json: any): TemporaryUploadRequest {
    return TemporaryUploadRequestFromJSONTyped(json, false);
}

export function TemporaryUploadRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemporaryUploadRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'uploadId': json['upload_id'],
        'fileName': json['file_name'],
        'fileId': json['file_id'],
        'file': json['file'],
        'uploadName': json['upload_name'],
        'uploadType': UploadTypeEnumFromJSON(json['upload_type']),
        'uploadedBy': json['uploaded_by'] == null ? undefined : json['uploaded_by'],
    };
}

  export function TemporaryUploadRequestToJSON(json: any): TemporaryUploadRequest {
      return TemporaryUploadRequestToJSONTyped(json, false);
  }

  export function TemporaryUploadRequestToJSONTyped(value?: TemporaryUploadRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'upload_id': value['uploadId'],
        'file_name': value['fileName'],
        'file_id': value['fileId'],
        'file': value['file'],
        'upload_name': value['uploadName'],
        'upload_type': UploadTypeEnumToJSON(value['uploadType']),
        'uploaded_by': value['uploadedBy'],
    };
}

