/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductType } from './ProductType';
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
    ProductTypeToJSONTyped,
} from './ProductType';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    id?: string;
    /**
     * 
     * @type {ProductType}
     * @memberof Product
     */
    type: ProductType;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    deleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    base?: boolean | null;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': ProductTypeFromJSON(json['type']),
        'name': json['name'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'base': json['base'] == null ? undefined : json['base'],
    };
}

  export function ProductToJSON(json: any): Product {
      return ProductToJSONTyped(json, false);
  }

  export function ProductToJSONTyped(value?: Product | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': ProductTypeToJSON(value['type']),
        'name': value['name'],
        'deleted': value['deleted'],
        'base': value['base'],
    };
}

