/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PickupLocation } from './PickupLocation';
import {
    PickupLocationFromJSON,
    PickupLocationFromJSONTyped,
    PickupLocationToJSON,
    PickupLocationToJSONTyped,
} from './PickupLocation';
import type { PickupLocationOpeningTime } from './PickupLocationOpeningTime';
import {
    PickupLocationOpeningTimeFromJSON,
    PickupLocationOpeningTimeFromJSONTyped,
    PickupLocationOpeningTimeToJSON,
    PickupLocationOpeningTimeToJSONTyped,
} from './PickupLocationOpeningTime';
import type { Subscription } from './Subscription';
import {
    SubscriptionFromJSON,
    SubscriptionFromJSONTyped,
    SubscriptionToJSON,
    SubscriptionToJSONTyped,
} from './Subscription';

/**
 * 
 * @export
 * @interface Delivery
 */
export interface Delivery {
    /**
     * 
     * @type {Date}
     * @memberof Delivery
     */
    deliveryDate: Date;
    /**
     * 
     * @type {PickupLocation}
     * @memberof Delivery
     */
    pickupLocation: PickupLocation;
    /**
     * 
     * @type {Array<Subscription>}
     * @memberof Delivery
     */
    subscriptions: Array<Subscription>;
    /**
     * 
     * @type {Array<PickupLocationOpeningTime>}
     * @memberof Delivery
     */
    pickupLocationOpeningTimes: Array<PickupLocationOpeningTime>;
    /**
     * 
     * @type {boolean}
     * @memberof Delivery
     */
    jokerUsed: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Delivery
     */
    canJokerBeUsedRelativeToDateLimit: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Delivery
     */
    canJokerBeUsedRelativeToMaxAmountPerGrowingPeriod: boolean;
}

/**
 * Check if a given object implements the Delivery interface.
 */
export function instanceOfDelivery(value: object): value is Delivery {
    if (!('deliveryDate' in value) || value['deliveryDate'] === undefined) return false;
    if (!('pickupLocation' in value) || value['pickupLocation'] === undefined) return false;
    if (!('subscriptions' in value) || value['subscriptions'] === undefined) return false;
    if (!('pickupLocationOpeningTimes' in value) || value['pickupLocationOpeningTimes'] === undefined) return false;
    if (!('jokerUsed' in value) || value['jokerUsed'] === undefined) return false;
    if (!('canJokerBeUsedRelativeToDateLimit' in value) || value['canJokerBeUsedRelativeToDateLimit'] === undefined) return false;
    if (!('canJokerBeUsedRelativeToMaxAmountPerGrowingPeriod' in value) || value['canJokerBeUsedRelativeToMaxAmountPerGrowingPeriod'] === undefined) return false;
    return true;
}

export function DeliveryFromJSON(json: any): Delivery {
    return DeliveryFromJSONTyped(json, false);
}

export function DeliveryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Delivery {
    if (json == null) {
        return json;
    }
    return {
        
        'deliveryDate': (new Date(json['delivery_date'])),
        'pickupLocation': PickupLocationFromJSON(json['pickup_location']),
        'subscriptions': ((json['subscriptions'] as Array<any>).map(SubscriptionFromJSON)),
        'pickupLocationOpeningTimes': ((json['pickup_location_opening_times'] as Array<any>).map(PickupLocationOpeningTimeFromJSON)),
        'jokerUsed': json['joker_used'],
        'canJokerBeUsedRelativeToDateLimit': json['can_joker_be_used_relative_to_date_limit'],
        'canJokerBeUsedRelativeToMaxAmountPerGrowingPeriod': json['can_joker_be_used_relative_to_max_amount_per_growing_period'],
    };
}

  export function DeliveryToJSON(json: any): Delivery {
      return DeliveryToJSONTyped(json, false);
  }

  export function DeliveryToJSONTyped(value?: Delivery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'delivery_date': ((value['deliveryDate']).toISOString().substring(0,10)),
        'pickup_location': PickupLocationToJSON(value['pickupLocation']),
        'subscriptions': ((value['subscriptions'] as Array<any>).map(SubscriptionToJSON)),
        'pickup_location_opening_times': ((value['pickupLocationOpeningTimes'] as Array<any>).map(PickupLocationOpeningTimeToJSON)),
        'joker_used': value['jokerUsed'],
        'can_joker_be_used_relative_to_date_limit': value['canJokerBeUsedRelativeToDateLimit'],
        'can_joker_be_used_relative_to_max_amount_per_growing_period': value['canJokerBeUsedRelativeToMaxAmountPerGrowingPeriod'],
    };
}

