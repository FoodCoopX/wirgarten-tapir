/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BestellWizardBaseDataResponse,
  BestellWizardCapacityCheckRequestRequest,
  BestellWizardCapacityCheckResponse,
  BestellWizardConfirmOrderRequestRequest,
  BestellWizardDeliveryDatesForOrderRequestRequest,
  BestellWizardDeliveryDatesForOrderResponse,
  OrderConfirmationResponse,
} from "../models/index";
import {
  BestellWizardBaseDataResponseFromJSON,
  BestellWizardCapacityCheckRequestRequestToJSON,
  BestellWizardCapacityCheckResponseFromJSON,
  BestellWizardConfirmOrderRequestRequestToJSON,
  BestellWizardDeliveryDatesForOrderRequestRequestToJSON,
  BestellWizardDeliveryDatesForOrderResponseFromJSON,
  OrderConfirmationResponseFromJSON,
} from "../models/index";

export interface BestellWizardApiBestellWizardCapacityCheckCreateRequest {
  bestellWizardCapacityCheckRequestRequest: BestellWizardCapacityCheckRequestRequest;
}

export interface BestellWizardApiBestellWizardDeliveryDatesCreateRequest {
  bestellWizardDeliveryDatesForOrderRequestRequest: BestellWizardDeliveryDatesForOrderRequestRequest;
}

export interface BestellWizardApiIsEmailAddressValidRetrieveRequest {
  email?: string;
}

export interface BestellWizardApiNextContractStartDateRetrieveRequest {
  waitingListEntryId?: string;
}

export interface BestellWizardBestellWizardConfirmOrderCreateRequest {
  bestellWizardConfirmOrderRequestRequest: BestellWizardConfirmOrderRequestRequest;
}

/**
 *
 */
export class BestellWizardApi extends runtime.BaseAPI {
  /**
   */
  async bestellWizardApiBestellWizardBaseDataRetrieveRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BestellWizardBaseDataResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/bestell_wizard/api/bestell_wizard_base_data`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BestellWizardBaseDataResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async bestellWizardApiBestellWizardBaseDataRetrieve(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BestellWizardBaseDataResponse> {
    const response =
      await this.bestellWizardApiBestellWizardBaseDataRetrieveRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async bestellWizardApiBestellWizardCapacityCheckCreateRaw(
    requestParameters: BestellWizardApiBestellWizardCapacityCheckCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BestellWizardCapacityCheckResponse>> {
    if (requestParameters["bestellWizardCapacityCheckRequestRequest"] == null) {
      throw new runtime.RequiredError(
        "bestellWizardCapacityCheckRequestRequest",
        'Required parameter "bestellWizardCapacityCheckRequestRequest" was null or undefined when calling bestellWizardApiBestellWizardCapacityCheckCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/bestell_wizard/api/bestell_wizard_capacity_check`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BestellWizardCapacityCheckRequestRequestToJSON(
          requestParameters["bestellWizardCapacityCheckRequestRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BestellWizardCapacityCheckResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async bestellWizardApiBestellWizardCapacityCheckCreate(
    requestParameters: BestellWizardApiBestellWizardCapacityCheckCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BestellWizardCapacityCheckResponse> {
    const response =
      await this.bestellWizardApiBestellWizardCapacityCheckCreateRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async bestellWizardApiBestellWizardDeliveryDatesCreateRaw(
    requestParameters: BestellWizardApiBestellWizardDeliveryDatesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BestellWizardDeliveryDatesForOrderResponse>> {
    if (
      requestParameters["bestellWizardDeliveryDatesForOrderRequestRequest"] ==
      null
    ) {
      throw new runtime.RequiredError(
        "bestellWizardDeliveryDatesForOrderRequestRequest",
        'Required parameter "bestellWizardDeliveryDatesForOrderRequestRequest" was null or undefined when calling bestellWizardApiBestellWizardDeliveryDatesCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/bestell_wizard/api/bestell_wizard_delivery_dates`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BestellWizardDeliveryDatesForOrderRequestRequestToJSON(
          requestParameters["bestellWizardDeliveryDatesForOrderRequestRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BestellWizardDeliveryDatesForOrderResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async bestellWizardApiBestellWizardDeliveryDatesCreate(
    requestParameters: BestellWizardApiBestellWizardDeliveryDatesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BestellWizardDeliveryDatesForOrderResponse> {
    const response =
      await this.bestellWizardApiBestellWizardDeliveryDatesCreateRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async bestellWizardApiIsEmailAddressValidRetrieveRaw(
    requestParameters: BestellWizardApiIsEmailAddressValidRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<boolean>> {
    const queryParameters: any = {};

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/bestell_wizard/api/is_email_address_valid`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<boolean>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async bestellWizardApiIsEmailAddressValidRetrieve(
    requestParameters: BestellWizardApiIsEmailAddressValidRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<boolean> {
    const response = await this.bestellWizardApiIsEmailAddressValidRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async bestellWizardApiNextContractStartDateRetrieveRaw(
    requestParameters: BestellWizardApiNextContractStartDateRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Date>> {
    const queryParameters: any = {};

    if (requestParameters["waitingListEntryId"] != null) {
      queryParameters["waiting_list_entry_id"] =
        requestParameters["waitingListEntryId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/bestell_wizard/api/next_contract_start_date`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<Date>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async bestellWizardApiNextContractStartDateRetrieve(
    requestParameters: BestellWizardApiNextContractStartDateRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Date> {
    const response =
      await this.bestellWizardApiNextContractStartDateRetrieveRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async bestellWizardBestellWizardConfirmOrderCreateRaw(
    requestParameters: BestellWizardBestellWizardConfirmOrderCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<OrderConfirmationResponse>> {
    if (requestParameters["bestellWizardConfirmOrderRequestRequest"] == null) {
      throw new runtime.RequiredError(
        "bestellWizardConfirmOrderRequestRequest",
        'Required parameter "bestellWizardConfirmOrderRequestRequest" was null or undefined when calling bestellWizardBestellWizardConfirmOrderCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/bestell_wizard/bestell_wizard_confirm_order`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BestellWizardConfirmOrderRequestRequestToJSON(
          requestParameters["bestellWizardConfirmOrderRequestRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrderConfirmationResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async bestellWizardBestellWizardConfirmOrderCreate(
    requestParameters: BestellWizardBestellWizardConfirmOrderCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<OrderConfirmationResponse> {
    const response = await this.bestellWizardBestellWizardConfirmOrderCreateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
