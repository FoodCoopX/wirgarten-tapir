/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExtendedProductTypeAndConfig,
} from '../models/index';
import {
    ExtendedProductTypeAndConfigFromJSON,
    ExtendedProductTypeAndConfigToJSON,
} from '../models/index';

export interface ProductsApiExtendedProductTypeRetrieveRequest {
    growingPeriodId?: Array<string>;
    productTypeId?: Array<string>;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     */
    async productsApiExtendedProductTypeCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/products/api/extended_product_type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productsApiExtendedProductTypeCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsApiExtendedProductTypeCreateRaw(initOverrides);
    }

    /**
     */
    async productsApiExtendedProductTypePartialUpdateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/products/api/extended_product_type`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productsApiExtendedProductTypePartialUpdate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsApiExtendedProductTypePartialUpdateRaw(initOverrides);
    }

    /**
     */
    async productsApiExtendedProductTypeRetrieveRaw(requestParameters: ProductsApiExtendedProductTypeRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedProductTypeAndConfig>> {
        const queryParameters: any = {};

        if (requestParameters['growingPeriodId'] != null) {
            queryParameters['growing_period_id'] = requestParameters['growingPeriodId'];
        }

        if (requestParameters['productTypeId'] != null) {
            queryParameters['product_type_id'] = requestParameters['productTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/products/api/extended_product_type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendedProductTypeAndConfigFromJSON(jsonValue));
    }

    /**
     */
    async productsApiExtendedProductTypeRetrieve(requestParameters: ProductsApiExtendedProductTypeRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedProductTypeAndConfig> {
        const response = await this.productsApiExtendedProductTypeRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
