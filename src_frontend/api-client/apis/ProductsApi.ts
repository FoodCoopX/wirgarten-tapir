/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ExtendedProductTypeAndConfig,
  PatchedSaveExtendedProductTypeRequest,
  ProductTypesAndConfig,
  SaveExtendedProductTypeRequest,
} from "../models/index";
import {
  ExtendedProductTypeAndConfigFromJSON,
  PatchedSaveExtendedProductTypeRequestToJSON,
  ProductTypesAndConfigFromJSON,
  SaveExtendedProductTypeRequestToJSON,
} from "../models/index";

export interface ProductsApiExtendedProductTypeCreateRequest {
  saveExtendedProductTypeRequest: SaveExtendedProductTypeRequest;
}

export interface ProductsApiExtendedProductTypePartialUpdateRequest {
  patchedSaveExtendedProductTypeRequest?: PatchedSaveExtendedProductTypeRequest;
}

export interface ProductsApiExtendedProductTypeRetrieveRequest {
  growingPeriodId?: Array<string>;
  productTypeId?: Array<string>;
}

export interface ProductsApiProductTypesWithoutCapacityRetrieveRequest {
  growingPeriodId?: Array<string>;
}

/**
 *
 */
export class ProductsApi extends runtime.BaseAPI {
  /**
   */
  async productsApiExtendedProductTypeCreateRaw(
    requestParameters: ProductsApiExtendedProductTypeCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["saveExtendedProductTypeRequest"] == null) {
      throw new runtime.RequiredError(
        "saveExtendedProductTypeRequest",
        'Required parameter "saveExtendedProductTypeRequest" was null or undefined when calling productsApiExtendedProductTypeCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/products/api/extended_product_type`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SaveExtendedProductTypeRequestToJSON(
          requestParameters["saveExtendedProductTypeRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async productsApiExtendedProductTypeCreate(
    requestParameters: ProductsApiExtendedProductTypeCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.productsApiExtendedProductTypeCreateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async productsApiExtendedProductTypePartialUpdateRaw(
    requestParameters: ProductsApiExtendedProductTypePartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/products/api/extended_product_type`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PatchedSaveExtendedProductTypeRequestToJSON(
          requestParameters["patchedSaveExtendedProductTypeRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async productsApiExtendedProductTypePartialUpdate(
    requestParameters: ProductsApiExtendedProductTypePartialUpdateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.productsApiExtendedProductTypePartialUpdateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async productsApiExtendedProductTypeRetrieveRaw(
    requestParameters: ProductsApiExtendedProductTypeRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExtendedProductTypeAndConfig>> {
    const queryParameters: any = {};

    if (requestParameters["growingPeriodId"] != null) {
      queryParameters["growing_period_id"] =
        requestParameters["growingPeriodId"];
    }

    if (requestParameters["productTypeId"] != null) {
      queryParameters["product_type_id"] = requestParameters["productTypeId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/products/api/extended_product_type`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExtendedProductTypeAndConfigFromJSON(jsonValue),
    );
  }

  /**
   */
  async productsApiExtendedProductTypeRetrieve(
    requestParameters: ProductsApiExtendedProductTypeRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExtendedProductTypeAndConfig> {
    const response = await this.productsApiExtendedProductTypeRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async productsApiProductTypesWithoutCapacityRetrieveRaw(
    requestParameters: ProductsApiProductTypesWithoutCapacityRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProductTypesAndConfig>> {
    const queryParameters: any = {};

    if (requestParameters["growingPeriodId"] != null) {
      queryParameters["growing_period_id"] =
        requestParameters["growingPeriodId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/products/api/product_types_without_capacity`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProductTypesAndConfigFromJSON(jsonValue),
    );
  }

  /**
   */
  async productsApiProductTypesWithoutCapacityRetrieve(
    requestParameters: ProductsApiProductTypesWithoutCapacityRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProductTypesAndConfig> {
    const response =
      await this.productsApiProductTypesWithoutCapacityRetrieveRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }
}
