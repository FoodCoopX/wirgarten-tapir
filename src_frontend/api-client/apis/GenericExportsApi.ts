/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BuildCsvExportResponse,
  CsvExportModel,
  CsvExportModelRequest,
  ExportSegment,
  PatchedCsvExportModelRequest,
} from '../models/index';
import {
    BuildCsvExportResponseFromJSON,
    BuildCsvExportResponseToJSON,
    CsvExportModelFromJSON,
    CsvExportModelToJSON,
    CsvExportModelRequestFromJSON,
    CsvExportModelRequestToJSON,
    ExportSegmentFromJSON,
    ExportSegmentToJSON,
    PatchedCsvExportModelRequestFromJSON,
    PatchedCsvExportModelRequestToJSON,
} from '../models/index';

export interface GenericExportsBuildCsvExportRetrieveRequest {
    csvExportId?: string;
    referenceDatetime?: Date;
}

export interface GenericExportsCsvExportsCreateRequest {
    csvExportModelRequest: CsvExportModelRequest;
}

export interface GenericExportsCsvExportsDestroyRequest {
    id: string;
}

export interface GenericExportsCsvExportsPartialUpdateRequest {
    id: string;
    patchedCsvExportModelRequest?: PatchedCsvExportModelRequest;
}

export interface GenericExportsCsvExportsRetrieveRequest {
    id: string;
}

export interface GenericExportsCsvExportsUpdateRequest {
    id: string;
    csvExportModelRequest: CsvExportModelRequest;
}

/**
 * 
 */
export class GenericExportsApi extends runtime.BaseAPI {

    /**
     */
    async genericExportsBuildCsvExportRetrieveRaw(requestParameters: GenericExportsBuildCsvExportRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildCsvExportResponse>> {
        const queryParameters: any = {};

        if (requestParameters['csvExportId'] != null) {
            queryParameters['csv_export_id'] = requestParameters['csvExportId'];
        }

        if (requestParameters['referenceDatetime'] != null) {
            queryParameters['reference_datetime'] = (requestParameters['referenceDatetime'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic_exports/build_csv_export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildCsvExportResponseFromJSON(jsonValue));
    }

    /**
     */
    async genericExportsBuildCsvExportRetrieve(requestParameters: GenericExportsBuildCsvExportRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildCsvExportResponse> {
        const response = await this.genericExportsBuildCsvExportRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async genericExportsCsvExportsCreateRaw(requestParameters: GenericExportsCsvExportsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CsvExportModel>> {
        if (requestParameters['csvExportModelRequest'] == null) {
            throw new runtime.RequiredError(
                'csvExportModelRequest',
                'Required parameter "csvExportModelRequest" was null or undefined when calling genericExportsCsvExportsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/generic_exports/csv_exports/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CsvExportModelRequestToJSON(requestParameters['csvExportModelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CsvExportModelFromJSON(jsonValue));
    }

    /**
     */
    async genericExportsCsvExportsCreate(requestParameters: GenericExportsCsvExportsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CsvExportModel> {
        const response = await this.genericExportsCsvExportsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async genericExportsCsvExportsDestroyRaw(requestParameters: GenericExportsCsvExportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericExportsCsvExportsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic_exports/csv_exports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async genericExportsCsvExportsDestroy(requestParameters: GenericExportsCsvExportsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.genericExportsCsvExportsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async genericExportsCsvExportsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CsvExportModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic_exports/csv_exports/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CsvExportModelFromJSON));
    }

    /**
     */
    async genericExportsCsvExportsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CsvExportModel>> {
        const response = await this.genericExportsCsvExportsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async genericExportsCsvExportsPartialUpdateRaw(requestParameters: GenericExportsCsvExportsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CsvExportModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericExportsCsvExportsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/generic_exports/csv_exports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCsvExportModelRequestToJSON(requestParameters['patchedCsvExportModelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CsvExportModelFromJSON(jsonValue));
    }

    /**
     */
    async genericExportsCsvExportsPartialUpdate(requestParameters: GenericExportsCsvExportsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CsvExportModel> {
        const response = await this.genericExportsCsvExportsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async genericExportsCsvExportsRetrieveRaw(requestParameters: GenericExportsCsvExportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CsvExportModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericExportsCsvExportsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic_exports/csv_exports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CsvExportModelFromJSON(jsonValue));
    }

    /**
     */
    async genericExportsCsvExportsRetrieve(requestParameters: GenericExportsCsvExportsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CsvExportModel> {
        const response = await this.genericExportsCsvExportsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async genericExportsCsvExportsUpdateRaw(requestParameters: GenericExportsCsvExportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CsvExportModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericExportsCsvExportsUpdate().'
            );
        }

        if (requestParameters['csvExportModelRequest'] == null) {
            throw new runtime.RequiredError(
                'csvExportModelRequest',
                'Required parameter "csvExportModelRequest" was null or undefined when calling genericExportsCsvExportsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/generic_exports/csv_exports/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CsvExportModelRequestToJSON(requestParameters['csvExportModelRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CsvExportModelFromJSON(jsonValue));
    }

    /**
     */
    async genericExportsCsvExportsUpdate(requestParameters: GenericExportsCsvExportsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CsvExportModel> {
        const response = await this.genericExportsCsvExportsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async genericExportsExportSegmentsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExportSegment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic_exports/export_segments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExportSegmentFromJSON));
    }

    /**
     */
    async genericExportsExportSegmentsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExportSegment>> {
        const response = await this.genericExportsExportSegmentsListRaw(initOverrides);
        return await response.value();
    }

}
