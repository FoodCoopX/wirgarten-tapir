/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Mpl,
  OrderConfirmationResponse,
  PatchedPickupLocationCapacitiesRequest,
  PickupLocation,
  PickupLocationCapacities,
  PickupLocationCapacityCheckRequestRequest,
  PickupLocationCapacityCheckResponse,
  PickupLocationCapacityEvolution,
  PublicPickupLocation,
} from '../models/index';
import {
    MplFromJSON,
    MplToJSON,
    OrderConfirmationResponseFromJSON,
    OrderConfirmationResponseToJSON,
    PatchedPickupLocationCapacitiesRequestFromJSON,
    PatchedPickupLocationCapacitiesRequestToJSON,
    PickupLocationFromJSON,
    PickupLocationToJSON,
    PickupLocationCapacitiesFromJSON,
    PickupLocationCapacitiesToJSON,
    PickupLocationCapacityCheckRequestRequestFromJSON,
    PickupLocationCapacityCheckRequestRequestToJSON,
    PickupLocationCapacityCheckResponseFromJSON,
    PickupLocationCapacityCheckResponseToJSON,
    PickupLocationCapacityEvolutionFromJSON,
    PickupLocationCapacityEvolutionToJSON,
    PublicPickupLocationFromJSON,
    PublicPickupLocationToJSON,
} from '../models/index';

export interface PickupLocationsApiChangeMemberPickupLocationCreateRequest {
    memberId?: string;
    pickupLocationId?: string;
}

export interface PickupLocationsApiGetMemberPickupLocationRetrieveRequest {
    memberId?: string;
}

export interface PickupLocationsApiPickupLocationCapacitiesPartialUpdateRequest {
    patchedPickupLocationCapacitiesRequest?: PatchedPickupLocationCapacitiesRequest;
}

export interface PickupLocationsApiPickupLocationCapacitiesRetrieveRequest {
    pickupLocationId?: string;
}

export interface PickupLocationsApiPickupLocationCapacityCheckCreateRequest {
    pickupLocationCapacityCheckRequestRequest: PickupLocationCapacityCheckRequestRequest;
}

export interface PickupLocationsApiPickupLocationCapacityEvolutionRetrieveRequest {
    pickupLocationId?: string;
}

export interface PickupLocationsPickupLocationsRetrieveRequest {
    id: string;
}

export interface PickupLocationsPublicPickupLocationsRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class PickupLocationsApi extends runtime.BaseAPI {

    /**
     */
    async pickupLocationsApiChangeMemberPickupLocationCreateRaw(requestParameters: PickupLocationsApiChangeMemberPickupLocationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderConfirmationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['memberId'] != null) {
            queryParameters['member_id'] = requestParameters['memberId'];
        }

        if (requestParameters['pickupLocationId'] != null) {
            queryParameters['pickup_location_id'] = requestParameters['pickupLocationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/api/change_member_pickup_location`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderConfirmationResponseFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsApiChangeMemberPickupLocationCreate(requestParameters: PickupLocationsApiChangeMemberPickupLocationCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderConfirmationResponse> {
        const response = await this.pickupLocationsApiChangeMemberPickupLocationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsApiGetMemberPickupLocationRetrieveRaw(requestParameters: PickupLocationsApiGetMemberPickupLocationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mpl>> {
        const queryParameters: any = {};

        if (requestParameters['memberId'] != null) {
            queryParameters['member_id'] = requestParameters['memberId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/api/get_member_pickup_location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MplFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsApiGetMemberPickupLocationRetrieve(requestParameters: PickupLocationsApiGetMemberPickupLocationRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mpl> {
        const response = await this.pickupLocationsApiGetMemberPickupLocationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacitiesPartialUpdateRaw(requestParameters: PickupLocationsApiPickupLocationCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/api/pickup_location_capacities`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPickupLocationCapacitiesRequestToJSON(requestParameters['patchedPickupLocationCapacitiesRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacitiesPartialUpdate(requestParameters: PickupLocationsApiPickupLocationCapacitiesPartialUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.pickupLocationsApiPickupLocationCapacitiesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacitiesRetrieveRaw(requestParameters: PickupLocationsApiPickupLocationCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupLocationCapacities>> {
        const queryParameters: any = {};

        if (requestParameters['pickupLocationId'] != null) {
            queryParameters['pickup_location_id'] = requestParameters['pickupLocationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/api/pickup_location_capacities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupLocationCapacitiesFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacitiesRetrieve(requestParameters: PickupLocationsApiPickupLocationCapacitiesRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupLocationCapacities> {
        const response = await this.pickupLocationsApiPickupLocationCapacitiesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacityCheckCreateRaw(requestParameters: PickupLocationsApiPickupLocationCapacityCheckCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupLocationCapacityCheckResponse>> {
        if (requestParameters['pickupLocationCapacityCheckRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'pickupLocationCapacityCheckRequestRequest',
                'Required parameter "pickupLocationCapacityCheckRequestRequest" was null or undefined when calling pickupLocationsApiPickupLocationCapacityCheckCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/api/pickup_location_capacity_check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupLocationCapacityCheckRequestRequestToJSON(requestParameters['pickupLocationCapacityCheckRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupLocationCapacityCheckResponseFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacityCheckCreate(requestParameters: PickupLocationsApiPickupLocationCapacityCheckCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupLocationCapacityCheckResponse> {
        const response = await this.pickupLocationsApiPickupLocationCapacityCheckCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacityEvolutionRetrieveRaw(requestParameters: PickupLocationsApiPickupLocationCapacityEvolutionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupLocationCapacityEvolution>> {
        const queryParameters: any = {};

        if (requestParameters['pickupLocationId'] != null) {
            queryParameters['pickup_location_id'] = requestParameters['pickupLocationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/api/pickup_location_capacity_evolution`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupLocationCapacityEvolutionFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsApiPickupLocationCapacityEvolutionRetrieve(requestParameters: PickupLocationsApiPickupLocationCapacityEvolutionRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupLocationCapacityEvolution> {
        const response = await this.pickupLocationsApiPickupLocationCapacityEvolutionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsPickupLocationsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PickupLocation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/pickup_locations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PickupLocationFromJSON));
    }

    /**
     */
    async pickupLocationsPickupLocationsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PickupLocation>> {
        const response = await this.pickupLocationsPickupLocationsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsPickupLocationsRetrieveRaw(requestParameters: PickupLocationsPickupLocationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupLocation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pickupLocationsPickupLocationsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/pickup_locations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupLocationFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsPickupLocationsRetrieve(requestParameters: PickupLocationsPickupLocationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupLocation> {
        const response = await this.pickupLocationsPickupLocationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsPublicPickupLocationsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPickupLocation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/public_pickup_locations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicPickupLocationFromJSON));
    }

    /**
     */
    async pickupLocationsPublicPickupLocationsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPickupLocation>> {
        const response = await this.pickupLocationsPublicPickupLocationsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pickupLocationsPublicPickupLocationsRetrieveRaw(requestParameters: PickupLocationsPublicPickupLocationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPickupLocation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pickupLocationsPublicPickupLocationsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pickup_locations/public_pickup_locations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPickupLocationFromJSON(jsonValue));
    }

    /**
     */
    async pickupLocationsPublicPickupLocationsRetrieve(requestParameters: PickupLocationsPublicPickupLocationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPickupLocation> {
        const response = await this.pickupLocationsPublicPickupLocationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
