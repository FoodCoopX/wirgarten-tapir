/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  PatchedPickupLocationCapacitiesRequest,
  PickupLocation,
  PickupLocationCapacities,
  PickupLocationCapacityEvolution,
  PublicPickupLocation,
} from "../models/index";
import {
  PatchedPickupLocationCapacitiesRequestToJSON,
  PickupLocationCapacitiesFromJSON,
  PickupLocationCapacityEvolutionFromJSON,
  PickupLocationFromJSON,
  PublicPickupLocationFromJSON,
} from "../models/index";

export interface PickupLocationsApiPickupLocationCapacitiesPartialUpdateRequest {
  patchedPickupLocationCapacitiesRequest?: PatchedPickupLocationCapacitiesRequest;
}

export interface PickupLocationsApiPickupLocationCapacitiesRetrieveRequest {
  pickupLocationId?: string;
}

export interface PickupLocationsApiPickupLocationCapacityEvolutionRetrieveRequest {
  pickupLocationId?: string;
}

export interface PickupLocationsPickupLocationsRetrieveRequest {
  id: string;
}

export interface PickupLocationsPublicPickupLocationsRetrieveRequest {
  id: string;
}

/**
 *
 */
export class PickupLocationsApi extends runtime.BaseAPI {
  /**
   */
  async pickupLocationsApiPickupLocationCapacitiesPartialUpdateRaw(
    requestParameters: PickupLocationsApiPickupLocationCapacitiesPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/api/pickup_location_capacities`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PatchedPickupLocationCapacitiesRequestToJSON(
          requestParameters["patchedPickupLocationCapacitiesRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async pickupLocationsApiPickupLocationCapacitiesPartialUpdate(
    requestParameters: PickupLocationsApiPickupLocationCapacitiesPartialUpdateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response =
      await this.pickupLocationsApiPickupLocationCapacitiesPartialUpdateRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async pickupLocationsApiPickupLocationCapacitiesRetrieveRaw(
    requestParameters: PickupLocationsApiPickupLocationCapacitiesRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PickupLocationCapacities>> {
    const queryParameters: any = {};

    if (requestParameters["pickupLocationId"] != null) {
      queryParameters["pickup_location_id"] =
        requestParameters["pickupLocationId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/api/pickup_location_capacities`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PickupLocationCapacitiesFromJSON(jsonValue),
    );
  }

  /**
   */
  async pickupLocationsApiPickupLocationCapacitiesRetrieve(
    requestParameters: PickupLocationsApiPickupLocationCapacitiesRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PickupLocationCapacities> {
    const response =
      await this.pickupLocationsApiPickupLocationCapacitiesRetrieveRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async pickupLocationsApiPickupLocationCapacityEvolutionRetrieveRaw(
    requestParameters: PickupLocationsApiPickupLocationCapacityEvolutionRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PickupLocationCapacityEvolution>> {
    const queryParameters: any = {};

    if (requestParameters["pickupLocationId"] != null) {
      queryParameters["pickup_location_id"] =
        requestParameters["pickupLocationId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/api/pickup_location_capacity_evolution`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PickupLocationCapacityEvolutionFromJSON(jsonValue),
    );
  }

  /**
   */
  async pickupLocationsApiPickupLocationCapacityEvolutionRetrieve(
    requestParameters: PickupLocationsApiPickupLocationCapacityEvolutionRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PickupLocationCapacityEvolution> {
    const response =
      await this.pickupLocationsApiPickupLocationCapacityEvolutionRetrieveRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async pickupLocationsPickupLocationsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PickupLocation>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/pickup_locations/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PickupLocationFromJSON),
    );
  }

  /**
   */
  async pickupLocationsPickupLocationsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PickupLocation>> {
    const response =
      await this.pickupLocationsPickupLocationsListRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async pickupLocationsPickupLocationsRetrieveRaw(
    requestParameters: PickupLocationsPickupLocationsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PickupLocation>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling pickupLocationsPickupLocationsRetrieve().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/pickup_locations/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PickupLocationFromJSON(jsonValue),
    );
  }

  /**
   */
  async pickupLocationsPickupLocationsRetrieve(
    requestParameters: PickupLocationsPickupLocationsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PickupLocation> {
    const response = await this.pickupLocationsPickupLocationsRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async pickupLocationsPublicPickupLocationsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PublicPickupLocation>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/public_pickup_locations/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PublicPickupLocationFromJSON),
    );
  }

  /**
   */
  async pickupLocationsPublicPickupLocationsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PublicPickupLocation>> {
    const response =
      await this.pickupLocationsPublicPickupLocationsListRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async pickupLocationsPublicPickupLocationsRetrieveRaw(
    requestParameters: PickupLocationsPublicPickupLocationsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PublicPickupLocation>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling pickupLocationsPublicPickupLocationsRetrieve().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/pickup_locations/public_pickup_locations/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicPickupLocationFromJSON(jsonValue),
    );
  }

  /**
   */
  async pickupLocationsPublicPickupLocationsRetrieve(
    requestParameters: PickupLocationsPublicPickupLocationsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PublicPickupLocation> {
    const response = await this.pickupLocationsPublicPickupLocationsRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
