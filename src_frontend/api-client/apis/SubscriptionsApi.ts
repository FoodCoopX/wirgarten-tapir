/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BestellWizardBaseDataResponse,
  BestellWizardCapacityCheckRequestRequest,
  BestellWizardCapacityCheckResponse,
  BestellWizardConfirmOrderRequestRequest,
  BestellWizardDeliveryDatesForOrderRequestRequest,
  BestellWizardDeliveryDatesForOrderResponse,
  CancellationData,
  CancelSubscriptionsViewResponse,
  ExtendedProduct,
  MemberDataToConfirm,
  OrderConfirmationResponse,
  PatchedExtendedProductRequest,
  Product,
  PublicProductType,
  PublicSubscription,
  UpdateSubscriptionsRequestRequest,
} from "../models/index";
import {
  BestellWizardBaseDataResponseFromJSON,
  BestellWizardCapacityCheckRequestRequestToJSON,
  BestellWizardCapacityCheckResponseFromJSON,
  BestellWizardConfirmOrderRequestRequestToJSON,
  BestellWizardDeliveryDatesForOrderRequestRequestToJSON,
  BestellWizardDeliveryDatesForOrderResponseFromJSON,
  CancellationDataFromJSON,
  CancelSubscriptionsViewResponseFromJSON,
  ExtendedProductFromJSON,
  MemberDataToConfirmFromJSON,
  OrderConfirmationResponseFromJSON,
  PatchedExtendedProductRequestToJSON,
  ProductFromJSON,
  PublicProductTypeFromJSON,
  PublicSubscriptionFromJSON,
  UpdateSubscriptionsRequestRequestToJSON,
} from "../models/index";

export interface SubscriptionsApiBestellWizardCapacityCheckCreateRequest {
  bestellWizardCapacityCheckRequestRequest: BestellWizardCapacityCheckRequestRequest;
}

export interface SubscriptionsApiBestellWizardDeliveryDatesCreateRequest {
  bestellWizardDeliveryDatesForOrderRequestRequest: BestellWizardDeliveryDatesForOrderRequestRequest;
}

export interface SubscriptionsApiConfirmSubscriptionChangesCreateRequest {
  confirmCancellationIds: Array<string>;
  confirmCreationIds: Array<string>;
  confirmPurchaseIds: Array<string>;
}

export interface SubscriptionsApiExtendedProductPartialUpdateRequest {
  patchedExtendedProductRequest?: PatchedExtendedProductRequest;
}

export interface SubscriptionsApiExtendedProductRetrieveRequest {
  productId?: string;
}

export interface SubscriptionsApiMemberSubscriptionsListRequest {
  memberId?: string;
}

export interface SubscriptionsApiUpdateSubscriptionCreateRequest {
  updateSubscriptionsRequestRequest: UpdateSubscriptionsRequestRequest;
}

export interface SubscriptionsBestellWizardConfirmOrderCreateRequest {
  bestellWizardConfirmOrderRequestRequest: BestellWizardConfirmOrderRequestRequest;
}

export interface SubscriptionsCancelSubscriptionsCreateRequest {
  cancelCoopMembership?: boolean;
  memberId?: string;
  productIds?: Array<string>;
}

export interface SubscriptionsCancellationDataRetrieveRequest {
  memberId?: string;
}

export interface SubscriptionsProductsRetrieveRequest {
  id: string;
}

export interface SubscriptionsPublicProductTypesRetrieveRequest {
  id: string;
}

/**
 *
 */
export class SubscriptionsApi extends runtime.BaseAPI {
  /**
   */
  async subscriptionsApiBestellWizardBaseDataRetrieveRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BestellWizardBaseDataResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/bestell_wizard_base_data`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BestellWizardBaseDataResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsApiBestellWizardBaseDataRetrieve(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BestellWizardBaseDataResponse> {
    const response =
      await this.subscriptionsApiBestellWizardBaseDataRetrieveRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiBestellWizardCapacityCheckCreateRaw(
    requestParameters: SubscriptionsApiBestellWizardCapacityCheckCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BestellWizardCapacityCheckResponse>> {
    if (requestParameters["bestellWizardCapacityCheckRequestRequest"] == null) {
      throw new runtime.RequiredError(
        "bestellWizardCapacityCheckRequestRequest",
        'Required parameter "bestellWizardCapacityCheckRequestRequest" was null or undefined when calling subscriptionsApiBestellWizardCapacityCheckCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/bestell_wizard_capacity_check`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BestellWizardCapacityCheckRequestRequestToJSON(
          requestParameters["bestellWizardCapacityCheckRequestRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BestellWizardCapacityCheckResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsApiBestellWizardCapacityCheckCreate(
    requestParameters: SubscriptionsApiBestellWizardCapacityCheckCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BestellWizardCapacityCheckResponse> {
    const response =
      await this.subscriptionsApiBestellWizardCapacityCheckCreateRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiBestellWizardDeliveryDatesCreateRaw(
    requestParameters: SubscriptionsApiBestellWizardDeliveryDatesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BestellWizardDeliveryDatesForOrderResponse>> {
    if (
      requestParameters["bestellWizardDeliveryDatesForOrderRequestRequest"] ==
      null
    ) {
      throw new runtime.RequiredError(
        "bestellWizardDeliveryDatesForOrderRequestRequest",
        'Required parameter "bestellWizardDeliveryDatesForOrderRequestRequest" was null or undefined when calling subscriptionsApiBestellWizardDeliveryDatesCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/bestell_wizard_delivery_dates`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BestellWizardDeliveryDatesForOrderRequestRequestToJSON(
          requestParameters["bestellWizardDeliveryDatesForOrderRequestRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BestellWizardDeliveryDatesForOrderResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsApiBestellWizardDeliveryDatesCreate(
    requestParameters: SubscriptionsApiBestellWizardDeliveryDatesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BestellWizardDeliveryDatesForOrderResponse> {
    const response =
      await this.subscriptionsApiBestellWizardDeliveryDatesCreateRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiConfirmSubscriptionChangesCreateRaw(
    requestParameters: SubscriptionsApiConfirmSubscriptionChangesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["confirmCancellationIds"] == null) {
      throw new runtime.RequiredError(
        "confirmCancellationIds",
        'Required parameter "confirmCancellationIds" was null or undefined when calling subscriptionsApiConfirmSubscriptionChangesCreate().',
      );
    }

    if (requestParameters["confirmCreationIds"] == null) {
      throw new runtime.RequiredError(
        "confirmCreationIds",
        'Required parameter "confirmCreationIds" was null or undefined when calling subscriptionsApiConfirmSubscriptionChangesCreate().',
      );
    }

    if (requestParameters["confirmPurchaseIds"] == null) {
      throw new runtime.RequiredError(
        "confirmPurchaseIds",
        'Required parameter "confirmPurchaseIds" was null or undefined when calling subscriptionsApiConfirmSubscriptionChangesCreate().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["confirmCancellationIds"] != null) {
      queryParameters["confirm_cancellation_ids"] =
        requestParameters["confirmCancellationIds"];
    }

    if (requestParameters["confirmCreationIds"] != null) {
      queryParameters["confirm_creation_ids"] =
        requestParameters["confirmCreationIds"];
    }

    if (requestParameters["confirmPurchaseIds"] != null) {
      queryParameters["confirm_purchase_ids"] =
        requestParameters["confirmPurchaseIds"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/confirm_subscription_changes`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async subscriptionsApiConfirmSubscriptionChangesCreate(
    requestParameters: SubscriptionsApiConfirmSubscriptionChangesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response =
      await this.subscriptionsApiConfirmSubscriptionChangesCreateRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiExtendedProductPartialUpdateRaw(
    requestParameters: SubscriptionsApiExtendedProductPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/extended_product`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PatchedExtendedProductRequestToJSON(
          requestParameters["patchedExtendedProductRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async subscriptionsApiExtendedProductPartialUpdate(
    requestParameters: SubscriptionsApiExtendedProductPartialUpdateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.subscriptionsApiExtendedProductPartialUpdateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiExtendedProductRetrieveRaw(
    requestParameters: SubscriptionsApiExtendedProductRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExtendedProduct>> {
    const queryParameters: any = {};

    if (requestParameters["productId"] != null) {
      queryParameters["product_id"] = requestParameters["productId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/extended_product`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExtendedProductFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsApiExtendedProductRetrieve(
    requestParameters: SubscriptionsApiExtendedProductRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExtendedProduct> {
    const response = await this.subscriptionsApiExtendedProductRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiMemberDataToConfirmListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<MemberDataToConfirm>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/member_data_to_confirm`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(MemberDataToConfirmFromJSON),
    );
  }

  /**
   */
  async subscriptionsApiMemberDataToConfirmList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<MemberDataToConfirm>> {
    const response =
      await this.subscriptionsApiMemberDataToConfirmListRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async subscriptionsApiMemberSubscriptionsListRaw(
    requestParameters: SubscriptionsApiMemberSubscriptionsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PublicSubscription>>> {
    const queryParameters: any = {};

    if (requestParameters["memberId"] != null) {
      queryParameters["member_id"] = requestParameters["memberId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/member_subscriptions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PublicSubscriptionFromJSON),
    );
  }

  /**
   */
  async subscriptionsApiMemberSubscriptionsList(
    requestParameters: SubscriptionsApiMemberSubscriptionsListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PublicSubscription>> {
    const response = await this.subscriptionsApiMemberSubscriptionsListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiUpdateSubscriptionCreateRaw(
    requestParameters: SubscriptionsApiUpdateSubscriptionCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["updateSubscriptionsRequestRequest"] == null) {
      throw new runtime.RequiredError(
        "updateSubscriptionsRequestRequest",
        'Required parameter "updateSubscriptionsRequestRequest" was null or undefined when calling subscriptionsApiUpdateSubscriptionCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/api/update_subscription`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateSubscriptionsRequestRequestToJSON(
          requestParameters["updateSubscriptionsRequestRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async subscriptionsApiUpdateSubscriptionCreate(
    requestParameters: SubscriptionsApiUpdateSubscriptionCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.subscriptionsApiUpdateSubscriptionCreateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsBestellWizardConfirmOrderCreateRaw(
    requestParameters: SubscriptionsBestellWizardConfirmOrderCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<OrderConfirmationResponse>> {
    if (requestParameters["bestellWizardConfirmOrderRequestRequest"] == null) {
      throw new runtime.RequiredError(
        "bestellWizardConfirmOrderRequestRequest",
        'Required parameter "bestellWizardConfirmOrderRequestRequest" was null or undefined when calling subscriptionsBestellWizardConfirmOrderCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/bestell_wizard_confirm_order`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BestellWizardConfirmOrderRequestRequestToJSON(
          requestParameters["bestellWizardConfirmOrderRequestRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrderConfirmationResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsBestellWizardConfirmOrderCreate(
    requestParameters: SubscriptionsBestellWizardConfirmOrderCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<OrderConfirmationResponse> {
    const response = await this.subscriptionsBestellWizardConfirmOrderCreateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsCancelSubscriptionsCreateRaw(
    requestParameters: SubscriptionsCancelSubscriptionsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CancelSubscriptionsViewResponse>> {
    const queryParameters: any = {};

    if (requestParameters["cancelCoopMembership"] != null) {
      queryParameters["cancel_coop_membership"] =
        requestParameters["cancelCoopMembership"];
    }

    if (requestParameters["memberId"] != null) {
      queryParameters["member_id"] = requestParameters["memberId"];
    }

    if (requestParameters["productIds"] != null) {
      queryParameters["product_ids"] = requestParameters["productIds"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/cancel_subscriptions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CancelSubscriptionsViewResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsCancelSubscriptionsCreate(
    requestParameters: SubscriptionsCancelSubscriptionsCreateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CancelSubscriptionsViewResponse> {
    const response = await this.subscriptionsCancelSubscriptionsCreateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsCancellationDataRetrieveRaw(
    requestParameters: SubscriptionsCancellationDataRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CancellationData>> {
    const queryParameters: any = {};

    if (requestParameters["memberId"] != null) {
      queryParameters["member_id"] = requestParameters["memberId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/cancellation_data`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CancellationDataFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsCancellationDataRetrieve(
    requestParameters: SubscriptionsCancellationDataRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CancellationData> {
    const response = await this.subscriptionsCancellationDataRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsProductsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Product>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/products/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ProductFromJSON),
    );
  }

  /**
   */
  async subscriptionsProductsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Product>> {
    const response = await this.subscriptionsProductsListRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async subscriptionsProductsRetrieveRaw(
    requestParameters: SubscriptionsProductsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Product>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling subscriptionsProductsRetrieve().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/products/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProductFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsProductsRetrieve(
    requestParameters: SubscriptionsProductsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Product> {
    const response = await this.subscriptionsProductsRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsPublicProductTypesListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PublicProductType>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/public_product_types/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PublicProductTypeFromJSON),
    );
  }

  /**
   */
  async subscriptionsPublicProductTypesList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PublicProductType>> {
    const response =
      await this.subscriptionsPublicProductTypesListRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async subscriptionsPublicProductTypesRetrieveRaw(
    requestParameters: SubscriptionsPublicProductTypesRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PublicProductType>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling subscriptionsPublicProductTypesRetrieve().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/subscriptions/public_product_types/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PublicProductTypeFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsPublicProductTypesRetrieve(
    requestParameters: SubscriptionsPublicProductTypesRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PublicProductType> {
    const response = await this.subscriptionsPublicProductTypesRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
