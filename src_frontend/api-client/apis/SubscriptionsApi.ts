/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancelSubscriptionsViewResponse,
  CancellationData,
  ExtendedProduct,
  PaginatedCancelledSubscriptionList,
  PatchedExtendedProductRequest,
  Product,
  ProductTypesAndNumberOfCancelledSubscriptionsToConfirmViewResponse,
} from '../models/index';
import {
    CancelSubscriptionsViewResponseFromJSON,
    CancelSubscriptionsViewResponseToJSON,
    CancellationDataFromJSON,
    CancellationDataToJSON,
    ExtendedProductFromJSON,
    ExtendedProductToJSON,
    PaginatedCancelledSubscriptionListFromJSON,
    PaginatedCancelledSubscriptionListToJSON,
    PatchedExtendedProductRequestFromJSON,
    PatchedExtendedProductRequestToJSON,
    ProductFromJSON,
    ProductToJSON,
    ProductTypesAndNumberOfCancelledSubscriptionsToConfirmViewResponseFromJSON,
    ProductTypesAndNumberOfCancelledSubscriptionsToConfirmViewResponseToJSON,
} from '../models/index';

export interface SubscriptionsApiCancelledSubscriptionsListRequest {
    limit: number;
    offset: number;
    productTypeId: string;
}

export interface SubscriptionsApiConfirmSubscriptionCancellationCreateRequest {
    subscriptionIds: Array<string>;
}

export interface SubscriptionsApiExtendedProductPartialUpdateRequest {
    patchedExtendedProductRequest?: PatchedExtendedProductRequest;
}

export interface SubscriptionsApiExtendedProductRetrieveRequest {
    productId?: string;
}

export interface SubscriptionsCancelSubscriptionsCreateRequest {
    cancelCoopMembership?: boolean;
    memberId?: string;
    productIds?: Array<string>;
}

export interface SubscriptionsCancellationDataRetrieveRequest {
    memberId?: string;
}

export interface SubscriptionsProductsRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionsApiCancelledSubscriptionsListRaw(requestParameters: SubscriptionsApiCancelledSubscriptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCancelledSubscriptionList>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling subscriptionsApiCancelledSubscriptionsList().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling subscriptionsApiCancelledSubscriptionsList().'
            );
        }

        if (requestParameters['productTypeId'] == null) {
            throw new runtime.RequiredError(
                'productTypeId',
                'Required parameter "productTypeId" was null or undefined when calling subscriptionsApiCancelledSubscriptionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['productTypeId'] != null) {
            queryParameters['product_type_id'] = requestParameters['productTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/api/cancelled_subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCancelledSubscriptionListFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsApiCancelledSubscriptionsList(requestParameters: SubscriptionsApiCancelledSubscriptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCancelledSubscriptionList> {
        const response = await this.subscriptionsApiCancelledSubscriptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsApiConfirmSubscriptionCancellationCreateRaw(requestParameters: SubscriptionsApiConfirmSubscriptionCancellationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['subscriptionIds'] == null) {
            throw new runtime.RequiredError(
                'subscriptionIds',
                'Required parameter "subscriptionIds" was null or undefined when calling subscriptionsApiConfirmSubscriptionCancellationCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['subscriptionIds'] != null) {
            queryParameters['subscription_ids'] = requestParameters['subscriptionIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/api/confirm_subscription_cancellation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async subscriptionsApiConfirmSubscriptionCancellationCreate(requestParameters: SubscriptionsApiConfirmSubscriptionCancellationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.subscriptionsApiConfirmSubscriptionCancellationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsApiExtendedProductPartialUpdateRaw(requestParameters: SubscriptionsApiExtendedProductPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subscriptions/api/extended_product`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedExtendedProductRequestToJSON(requestParameters['patchedExtendedProductRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async subscriptionsApiExtendedProductPartialUpdate(requestParameters: SubscriptionsApiExtendedProductPartialUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.subscriptionsApiExtendedProductPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsApiExtendedProductRetrieveRaw(requestParameters: SubscriptionsApiExtendedProductRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedProduct>> {
        const queryParameters: any = {};

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/api/extended_product`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendedProductFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsApiExtendedProductRetrieve(requestParameters: SubscriptionsApiExtendedProductRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedProduct> {
        const response = await this.subscriptionsApiExtendedProductRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsApiProductTypesAndNumberOfCancelledSubscriptionsRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypesAndNumberOfCancelledSubscriptionsToConfirmViewResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/api/product_types_and_number_of_cancelled_subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypesAndNumberOfCancelledSubscriptionsToConfirmViewResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsApiProductTypesAndNumberOfCancelledSubscriptionsRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypesAndNumberOfCancelledSubscriptionsToConfirmViewResponse> {
        const response = await this.subscriptionsApiProductTypesAndNumberOfCancelledSubscriptionsRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsCancelSubscriptionsCreateRaw(requestParameters: SubscriptionsCancelSubscriptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelSubscriptionsViewResponse>> {
        const queryParameters: any = {};

        if (requestParameters['cancelCoopMembership'] != null) {
            queryParameters['cancel_coop_membership'] = requestParameters['cancelCoopMembership'];
        }

        if (requestParameters['memberId'] != null) {
            queryParameters['member_id'] = requestParameters['memberId'];
        }

        if (requestParameters['productIds'] != null) {
            queryParameters['product_ids'] = requestParameters['productIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/cancel_subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelSubscriptionsViewResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsCancelSubscriptionsCreate(requestParameters: SubscriptionsCancelSubscriptionsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelSubscriptionsViewResponse> {
        const response = await this.subscriptionsCancelSubscriptionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsCancellationDataRetrieveRaw(requestParameters: SubscriptionsCancellationDataRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancellationData>> {
        const queryParameters: any = {};

        if (requestParameters['memberId'] != null) {
            queryParameters['member_id'] = requestParameters['memberId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/cancellation_data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancellationDataFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsCancellationDataRetrieve(requestParameters: SubscriptionsCancellationDataRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancellationData> {
        const response = await this.subscriptionsCancellationDataRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsProductsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/products/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     */
    async subscriptionsProductsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.subscriptionsProductsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsProductsRetrieveRaw(requestParameters: SubscriptionsProductsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling subscriptionsProductsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscriptions/products/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsProductsRetrieve(requestParameters: SubscriptionsProductsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.subscriptionsProductsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
