/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CancellationData,
  CancelSubscriptionsViewResponse,
  ExtendedProduct,
  PatchedExtendedProductRequest,
} from "../models/index";
import {
  CancellationDataFromJSON,
  CancelSubscriptionsViewResponseFromJSON,
  ExtendedProductFromJSON,
  PatchedExtendedProductRequestToJSON,
} from "../models/index";

export interface SubscriptionsApiExtendedProductPartialUpdateRequest {
  patchedExtendedProductRequest?: PatchedExtendedProductRequest;
}

export interface SubscriptionsApiExtendedProductRetrieveRequest {
  productId?: string;
}

export interface SubscriptionsCancelSubscriptionsCreateRequest {
  cancelCoopMembership?: boolean;
  memberId?: string;
  productIds?: Array<string>;
}

export interface SubscriptionsCancellationDataRetrieveRequest {
  memberId?: string;
}

/**
 *
 */
export class SubscriptionsApi extends runtime.BaseAPI {
  /**
   */
  async subscriptionsApiExtendedProductPartialUpdateRaw(
    requestParameters: SubscriptionsApiExtendedProductPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/subscriptions/api/extended_product`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PatchedExtendedProductRequestToJSON(
          requestParameters["patchedExtendedProductRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async subscriptionsApiExtendedProductPartialUpdate(
    requestParameters: SubscriptionsApiExtendedProductPartialUpdateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.subscriptionsApiExtendedProductPartialUpdateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsApiExtendedProductRetrieveRaw(
    requestParameters: SubscriptionsApiExtendedProductRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExtendedProduct>> {
    const queryParameters: any = {};

    if (requestParameters["productId"] != null) {
      queryParameters["product_id"] = requestParameters["productId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/subscriptions/api/extended_product`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExtendedProductFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsApiExtendedProductRetrieve(
    requestParameters: SubscriptionsApiExtendedProductRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExtendedProduct> {
    const response = await this.subscriptionsApiExtendedProductRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsCancelSubscriptionsCreateRaw(
    requestParameters: SubscriptionsCancelSubscriptionsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CancelSubscriptionsViewResponse>> {
    const queryParameters: any = {};

    if (requestParameters["cancelCoopMembership"] != null) {
      queryParameters["cancel_coop_membership"] =
        requestParameters["cancelCoopMembership"];
    }

    if (requestParameters["memberId"] != null) {
      queryParameters["member_id"] = requestParameters["memberId"];
    }

    if (requestParameters["productIds"] != null) {
      queryParameters["product_ids"] = requestParameters["productIds"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/subscriptions/cancel_subscriptions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CancelSubscriptionsViewResponseFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsCancelSubscriptionsCreate(
    requestParameters: SubscriptionsCancelSubscriptionsCreateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CancelSubscriptionsViewResponse> {
    const response = await this.subscriptionsCancelSubscriptionsCreateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async subscriptionsCancellationDataRetrieveRaw(
    requestParameters: SubscriptionsCancellationDataRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CancellationData>> {
    const queryParameters: any = {};

    if (requestParameters["memberId"] != null) {
      queryParameters["member_id"] = requestParameters["memberId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/subscriptions/cancellation_data`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CancellationDataFromJSON(jsonValue),
    );
  }

  /**
   */
  async subscriptionsCancellationDataRetrieve(
    requestParameters: SubscriptionsCancellationDataRetrieveRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CancellationData> {
    const response = await this.subscriptionsCancellationDataRetrieveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
