/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BundledEmailConfiguration,
  BundledEmailConfigurationRequest,
  CreateMissingTriggerMailRequest,
  EmailConfiguration,
  EmailConfigurationDispatch,
  EmailConfigurationDispatchRequest,
  EmailConfigurationRequest,
  EmailDispatch,
  EmailDispatchRequest,
  EmailTemplate,
  EmailTemplateRequest,
  MissingTrigger,
  PaginatedEmailConfigurationDispatchList,
  PaginatedEmailConfigurationList,
  PaginatedEmailConfigurationVersionList,
  PaginatedEmailDispatchList,
  PaginatedEmailDispatchWithRetriesList,
  PaginatedEmailTemplateList,
  PaginatedGroupedEmailDispatchList,
  PatchedBundledEmailConfigurationRequest,
  PatchedEmailConfigurationDispatchRequest,
  PatchedEmailConfigurationRequest,
  PatchedEmailTemplateRequest,
  PatchedStaticSegmentRecipientRequest,
  PatchedStaticSegmentRequest,
  PatchedStoredUploadRequest,
  PatchedTemporaryUploadRequest,
  RecipientRequest,
  SegmentDataRequest,
  StaticSegment,
  StaticSegmentRecipient,
  StaticSegmentRecipientRequest,
  StaticSegmentRequest,
  StoredUpload,
  StoredUploadRequest,
  TapirmailApiSegmentAvailableFiltersRetrieve200Response,
  TapirmailApiSegmentAvailableSegmentsRetrieve200Response,
  TapirmailApiSegmentCombineCreate200Response,
  TemporaryUpload,
  TemporaryUploadRequest,
  TriggerDefinition,
} from '../models/index';
import {
    BundledEmailConfigurationFromJSON,
    BundledEmailConfigurationToJSON,
    BundledEmailConfigurationRequestFromJSON,
    BundledEmailConfigurationRequestToJSON,
    CreateMissingTriggerMailRequestFromJSON,
    CreateMissingTriggerMailRequestToJSON,
    EmailConfigurationFromJSON,
    EmailConfigurationToJSON,
    EmailConfigurationDispatchFromJSON,
    EmailConfigurationDispatchToJSON,
    EmailConfigurationDispatchRequestFromJSON,
    EmailConfigurationDispatchRequestToJSON,
    EmailConfigurationRequestFromJSON,
    EmailConfigurationRequestToJSON,
    EmailDispatchFromJSON,
    EmailDispatchToJSON,
    EmailDispatchRequestFromJSON,
    EmailDispatchRequestToJSON,
    EmailTemplateFromJSON,
    EmailTemplateToJSON,
    EmailTemplateRequestFromJSON,
    EmailTemplateRequestToJSON,
    MissingTriggerFromJSON,
    MissingTriggerToJSON,
    PaginatedEmailConfigurationDispatchListFromJSON,
    PaginatedEmailConfigurationDispatchListToJSON,
    PaginatedEmailConfigurationListFromJSON,
    PaginatedEmailConfigurationListToJSON,
    PaginatedEmailConfigurationVersionListFromJSON,
    PaginatedEmailConfigurationVersionListToJSON,
    PaginatedEmailDispatchListFromJSON,
    PaginatedEmailDispatchListToJSON,
    PaginatedEmailDispatchWithRetriesListFromJSON,
    PaginatedEmailDispatchWithRetriesListToJSON,
    PaginatedEmailTemplateListFromJSON,
    PaginatedEmailTemplateListToJSON,
    PaginatedGroupedEmailDispatchListFromJSON,
    PaginatedGroupedEmailDispatchListToJSON,
    PatchedBundledEmailConfigurationRequestFromJSON,
    PatchedBundledEmailConfigurationRequestToJSON,
    PatchedEmailConfigurationDispatchRequestFromJSON,
    PatchedEmailConfigurationDispatchRequestToJSON,
    PatchedEmailConfigurationRequestFromJSON,
    PatchedEmailConfigurationRequestToJSON,
    PatchedEmailTemplateRequestFromJSON,
    PatchedEmailTemplateRequestToJSON,
    PatchedStaticSegmentRecipientRequestFromJSON,
    PatchedStaticSegmentRecipientRequestToJSON,
    PatchedStaticSegmentRequestFromJSON,
    PatchedStaticSegmentRequestToJSON,
    PatchedStoredUploadRequestFromJSON,
    PatchedStoredUploadRequestToJSON,
    PatchedTemporaryUploadRequestFromJSON,
    PatchedTemporaryUploadRequestToJSON,
    RecipientRequestFromJSON,
    RecipientRequestToJSON,
    SegmentDataRequestFromJSON,
    SegmentDataRequestToJSON,
    StaticSegmentFromJSON,
    StaticSegmentToJSON,
    StaticSegmentRecipientFromJSON,
    StaticSegmentRecipientToJSON,
    StaticSegmentRecipientRequestFromJSON,
    StaticSegmentRecipientRequestToJSON,
    StaticSegmentRequestFromJSON,
    StaticSegmentRequestToJSON,
    StoredUploadFromJSON,
    StoredUploadToJSON,
    StoredUploadRequestFromJSON,
    StoredUploadRequestToJSON,
    TapirmailApiSegmentAvailableFiltersRetrieve200ResponseFromJSON,
    TapirmailApiSegmentAvailableFiltersRetrieve200ResponseToJSON,
    TapirmailApiSegmentAvailableSegmentsRetrieve200ResponseFromJSON,
    TapirmailApiSegmentAvailableSegmentsRetrieve200ResponseToJSON,
    TapirmailApiSegmentCombineCreate200ResponseFromJSON,
    TapirmailApiSegmentCombineCreate200ResponseToJSON,
    TemporaryUploadFromJSON,
    TemporaryUploadToJSON,
    TemporaryUploadRequestFromJSON,
    TemporaryUploadRequestToJSON,
    TriggerDefinitionFromJSON,
    TriggerDefinitionToJSON,
} from '../models/index';

export interface EmailConfigurationVersionSendTestEmailRequest {
    id: string;
    recipientRequest: RecipientRequest;
}

export interface StoreduploadsCreateRequest {
    storedUploadRequest: StoredUploadRequest;
}

export interface StoreduploadsDestroyRequest {
    uploadId: string;
}

export interface StoreduploadsPartialUpdateRequest {
    uploadId: string;
    patchedStoredUploadRequest?: PatchedStoredUploadRequest;
}

export interface StoreduploadsRetrieveRequest {
    uploadId: string;
}

export interface StoreduploadsUpdateRequest {
    uploadId: string;
    storedUploadRequest: StoredUploadRequest;
}

export interface TapirmailApiCreateMissingTriggerCreateRequest {
    createMissingTriggerMailRequest: CreateMissingTriggerMailRequest;
}

export interface TapirmailApiEmailConfigurationCreateRequest {
    emailConfigurationRequest: EmailConfigurationRequest;
}

export interface TapirmailApiEmailConfigurationDestroyRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationDispatchCreateRequest {
    emailConfigurationDispatchRequest: EmailConfigurationDispatchRequest;
}

export interface TapirmailApiEmailConfigurationDispatchDestroyRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationDispatchLastSentListRequest {
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailConfigurationDispatchListRequest {
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailConfigurationDispatchNextSendsListRequest {
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailConfigurationDispatchPartialUpdateRequest {
    id: string;
    patchedEmailConfigurationDispatchRequest?: PatchedEmailConfigurationDispatchRequest;
}

export interface TapirmailApiEmailConfigurationDispatchRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationDispatchRetryallCreateRequest {
    id: string;
    emailConfigurationDispatchRequest: EmailConfigurationDispatchRequest;
}

export interface TapirmailApiEmailConfigurationDispatchUpdateRequest {
    id: string;
    emailConfigurationDispatchRequest: EmailConfigurationDispatchRequest;
}

export interface TapirmailApiEmailConfigurationDuplicateRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationListRequest {
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailConfigurationPartialUpdateRequest {
    id: string;
    patchedEmailConfigurationRequest?: PatchedEmailConfigurationRequest;
}

export interface TapirmailApiEmailConfigurationRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationUpdateRequest {
    id: string;
    emailConfigurationRequest: EmailConfigurationRequest;
}

export interface TapirmailApiEmailConfigurationVersionArchiveCreateRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationVersionCreateRequest {
    bundledEmailConfigurationRequest: BundledEmailConfigurationRequest;
}

export interface TapirmailApiEmailConfigurationVersionDestroyRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationVersionDraftCreateRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationVersionGetBundledInfoRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationVersionPartialUpdateRequest {
    id: string;
    patchedBundledEmailConfigurationRequest?: PatchedBundledEmailConfigurationRequest;
}

export interface TapirmailApiEmailConfigurationVersionReleaseCreateRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationVersionRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailConfigurationVersionUpdateRequest {
    id: string;
    bundledEmailConfigurationRequest: BundledEmailConfigurationRequest;
}

export interface TapirmailApiEmailConfigurationVersionsListRequest {
    id: string;
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailDispatchGetFailedDispatchesListRequest {
    recipient: string;
    endDate?: Date;
    limit?: number;
    offset?: number;
    startDate?: Date;
}

export interface TapirmailApiEmailDispatchListRequest {
    configDispatchId?: string;
    dispatchStatus?: string;
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailDispatchRecipientsWithErrorsListRequest {
    endDate?: Date;
    limit?: number;
    offset?: number;
    startDate?: Date;
}

export interface TapirmailApiEmailDispatchRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailDispatchRetryCreateRequest {
    id: string;
    emailDispatchRequest: EmailDispatchRequest;
}

export interface TapirmailApiEmailTemplateCreateRequest {
    emailTemplateRequest: EmailTemplateRequest;
}

export interface TapirmailApiEmailTemplateDestroyRequest {
    id: string;
}

export interface TapirmailApiEmailTemplatePaginatedCreateRequest {
    emailTemplateRequest: EmailTemplateRequest;
}

export interface TapirmailApiEmailTemplatePaginatedDestroyRequest {
    id: string;
}

export interface TapirmailApiEmailTemplatePaginatedListRequest {
    limit?: number;
    offset?: number;
}

export interface TapirmailApiEmailTemplatePaginatedPartialUpdateRequest {
    id: string;
    patchedEmailTemplateRequest?: PatchedEmailTemplateRequest;
}

export interface TapirmailApiEmailTemplatePaginatedRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailTemplatePaginatedUpdateRequest {
    id: string;
    emailTemplateRequest: EmailTemplateRequest;
}

export interface TapirmailApiEmailTemplatePartialUpdateRequest {
    id: string;
    patchedEmailTemplateRequest?: PatchedEmailTemplateRequest;
}

export interface TapirmailApiEmailTemplateRetrieveRequest {
    id: string;
}

export interface TapirmailApiEmailTemplateUpdateRequest {
    id: string;
    emailTemplateRequest: EmailTemplateRequest;
}

export interface TapirmailApiMediaLibraryFilepondPatchPartialUpdateRequest {
    chunkId: string;
}

export interface TapirmailApiSegmentCombineCreateRequest {
    segmentDataRequest: SegmentDataRequest;
}

export interface TapirmailApiStaticSegmentCreateRequest {
    staticSegmentRequest: StaticSegmentRequest;
}

export interface TapirmailApiStaticSegmentDestroyRequest {
    id: string;
}

export interface TapirmailApiStaticSegmentPartialUpdateRequest {
    id: string;
    patchedStaticSegmentRequest?: PatchedStaticSegmentRequest;
}

export interface TapirmailApiStaticSegmentRecipientCreateRequest {
    staticSegmentRecipientRequest: StaticSegmentRecipientRequest;
}

export interface TapirmailApiStaticSegmentRecipientDestroyRequest {
    id: string;
}

export interface TapirmailApiStaticSegmentRecipientPartialUpdateRequest {
    id: string;
    patchedStaticSegmentRecipientRequest?: PatchedStaticSegmentRecipientRequest;
}

export interface TapirmailApiStaticSegmentRecipientRetrieveRequest {
    id: string;
}

export interface TapirmailApiStaticSegmentRecipientUpdateRequest {
    id: string;
    staticSegmentRecipientRequest: StaticSegmentRecipientRequest;
}

export interface TapirmailApiStaticSegmentRetrieveRequest {
    id: string;
}

export interface TapirmailApiStaticSegmentUpdateRequest {
    id: string;
    staticSegmentRequest: StaticSegmentRequest;
}

export interface TapirmailApiTrackingTrackRetrieveRequest {
    id: string;
}

export interface TemporaryuploadsCreateRequest {
    temporaryUploadRequest: TemporaryUploadRequest;
}

export interface TemporaryuploadsDestroyRequest {
    uploadId: string;
}

export interface TemporaryuploadsPartialUpdateRequest {
    uploadId: string;
    patchedTemporaryUploadRequest?: PatchedTemporaryUploadRequest;
}

export interface TemporaryuploadsRetrieveRequest {
    uploadId: string;
}

export interface TemporaryuploadsUpdateRequest {
    uploadId: string;
    temporaryUploadRequest: TemporaryUploadRequest;
}

/**
 * 
 */
export class TapirmailApi extends runtime.BaseAPI {

    /**
     */
    async emailConfigurationVersionSendTestEmailRaw(requestParameters: EmailConfigurationVersionSendTestEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emailConfigurationVersionSendTestEmail().'
            );
        }

        if (requestParameters['recipientRequest'] == null) {
            throw new runtime.RequiredError(
                'recipientRequest',
                'Required parameter "recipientRequest" was null or undefined when calling emailConfigurationVersionSendTestEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/send_test_email/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipientRequestToJSON(requestParameters['recipientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async emailConfigurationVersionSendTestEmail(requestParameters: EmailConfigurationVersionSendTestEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.emailConfigurationVersionSendTestEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeduploadsCreateRaw(requestParameters: StoreduploadsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredUpload>> {
        if (requestParameters['storedUploadRequest'] == null) {
            throw new runtime.RequiredError(
                'storedUploadRequest',
                'Required parameter "storedUploadRequest" was null or undefined when calling storeduploadsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/stored_upload/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoredUploadRequestToJSON(requestParameters['storedUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredUploadFromJSON(jsonValue));
    }

    /**
     */
    async storeduploadsCreate(requestParameters: StoreduploadsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredUpload> {
        const response = await this.storeduploadsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeduploadsDestroyRaw(requestParameters: StoreduploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling storeduploadsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/stored_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async storeduploadsDestroy(requestParameters: StoreduploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeduploadsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async storeduploadsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StoredUpload>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/stored_upload/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoredUploadFromJSON));
    }

    /**
     */
    async storeduploadsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StoredUpload>> {
        const response = await this.storeduploadsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async storeduploadsPartialUpdateRaw(requestParameters: StoreduploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredUpload>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling storeduploadsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/stored_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStoredUploadRequestToJSON(requestParameters['patchedStoredUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredUploadFromJSON(jsonValue));
    }

    /**
     */
    async storeduploadsPartialUpdate(requestParameters: StoreduploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredUpload> {
        const response = await this.storeduploadsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeduploadsRetrieveRaw(requestParameters: StoreduploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredUpload>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling storeduploadsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/stored_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredUploadFromJSON(jsonValue));
    }

    /**
     */
    async storeduploadsRetrieve(requestParameters: StoreduploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredUpload> {
        const response = await this.storeduploadsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeduploadsUpdateRaw(requestParameters: StoreduploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredUpload>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling storeduploadsUpdate().'
            );
        }

        if (requestParameters['storedUploadRequest'] == null) {
            throw new runtime.RequiredError(
                'storedUploadRequest',
                'Required parameter "storedUploadRequest" was null or undefined when calling storeduploadsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/stored_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoredUploadRequestToJSON(requestParameters['storedUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredUploadFromJSON(jsonValue));
    }

    /**
     */
    async storeduploadsUpdate(requestParameters: StoreduploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredUpload> {
        const response = await this.storeduploadsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiCreateMissingTriggerCreateRaw(requestParameters: TapirmailApiCreateMissingTriggerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createMissingTriggerMailRequest'] == null) {
            throw new runtime.RequiredError(
                'createMissingTriggerMailRequest',
                'Required parameter "createMissingTriggerMailRequest" was null or undefined when calling tapirmailApiCreateMissingTriggerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/create_missing_trigger`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMissingTriggerMailRequestToJSON(requestParameters['createMissingTriggerMailRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async tapirmailApiCreateMissingTriggerCreate(requestParameters: TapirmailApiCreateMissingTriggerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.tapirmailApiCreateMissingTriggerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationCreateRaw(requestParameters: TapirmailApiEmailConfigurationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfiguration>> {
        if (requestParameters['emailConfigurationRequest'] == null) {
            throw new runtime.RequiredError(
                'emailConfigurationRequest',
                'Required parameter "emailConfigurationRequest" was null or undefined when calling tapirmailApiEmailConfigurationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailConfigurationRequestToJSON(requestParameters['emailConfigurationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationCreate(requestParameters: TapirmailApiEmailConfigurationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDestroyRaw(requestParameters: TapirmailApiEmailConfigurationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationDestroy(requestParameters: TapirmailApiEmailConfigurationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiEmailConfigurationDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchCreateRaw(requestParameters: TapirmailApiEmailConfigurationDispatchCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfigurationDispatch>> {
        if (requestParameters['emailConfigurationDispatchRequest'] == null) {
            throw new runtime.RequiredError(
                'emailConfigurationDispatchRequest',
                'Required parameter "emailConfigurationDispatchRequest" was null or undefined when calling tapirmailApiEmailConfigurationDispatchCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailConfigurationDispatchRequestToJSON(requestParameters['emailConfigurationDispatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationDispatchFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchCreate(requestParameters: TapirmailApiEmailConfigurationDispatchCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfigurationDispatch> {
        const response = await this.tapirmailApiEmailConfigurationDispatchCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchDestroyRaw(requestParameters: TapirmailApiEmailConfigurationDispatchDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDispatchDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchDestroy(requestParameters: TapirmailApiEmailConfigurationDispatchDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiEmailConfigurationDispatchDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchLastSentListRaw(requestParameters: TapirmailApiEmailConfigurationDispatchLastSentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailConfigurationDispatchList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/last_sent/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailConfigurationDispatchListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchLastSentList(requestParameters: TapirmailApiEmailConfigurationDispatchLastSentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailConfigurationDispatchList> {
        const response = await this.tapirmailApiEmailConfigurationDispatchLastSentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchListRaw(requestParameters: TapirmailApiEmailConfigurationDispatchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailConfigurationDispatchList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailConfigurationDispatchListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchList(requestParameters: TapirmailApiEmailConfigurationDispatchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailConfigurationDispatchList> {
        const response = await this.tapirmailApiEmailConfigurationDispatchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of email config dispatch that will be sent next.
     */
    async tapirmailApiEmailConfigurationDispatchNextSendsListRaw(requestParameters: TapirmailApiEmailConfigurationDispatchNextSendsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailConfigurationDispatchList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/next_sends/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailConfigurationDispatchListFromJSON(jsonValue));
    }

    /**
     * Returns the list of email config dispatch that will be sent next.
     */
    async tapirmailApiEmailConfigurationDispatchNextSendsList(requestParameters: TapirmailApiEmailConfigurationDispatchNextSendsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailConfigurationDispatchList> {
        const response = await this.tapirmailApiEmailConfigurationDispatchNextSendsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchPartialUpdateRaw(requestParameters: TapirmailApiEmailConfigurationDispatchPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfigurationDispatch>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDispatchPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmailConfigurationDispatchRequestToJSON(requestParameters['patchedEmailConfigurationDispatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationDispatchFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchPartialUpdate(requestParameters: TapirmailApiEmailConfigurationDispatchPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfigurationDispatch> {
        const response = await this.tapirmailApiEmailConfigurationDispatchPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchRetrieveRaw(requestParameters: TapirmailApiEmailConfigurationDispatchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfigurationDispatch>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDispatchRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationDispatchFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchRetrieve(requestParameters: TapirmailApiEmailConfigurationDispatchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfigurationDispatch> {
        const response = await this.tapirmailApiEmailConfigurationDispatchRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchRetryallCreateRaw(requestParameters: TapirmailApiEmailConfigurationDispatchRetryallCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDispatchRetryallCreate().'
            );
        }

        if (requestParameters['emailConfigurationDispatchRequest'] == null) {
            throw new runtime.RequiredError(
                'emailConfigurationDispatchRequest',
                'Required parameter "emailConfigurationDispatchRequest" was null or undefined when calling tapirmailApiEmailConfigurationDispatchRetryallCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/{id}/retryall/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailConfigurationDispatchRequestToJSON(requestParameters['emailConfigurationDispatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchRetryallCreate(requestParameters: TapirmailApiEmailConfigurationDispatchRetryallCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.tapirmailApiEmailConfigurationDispatchRetryallCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchUpdateRaw(requestParameters: TapirmailApiEmailConfigurationDispatchUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfigurationDispatch>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDispatchUpdate().'
            );
        }

        if (requestParameters['emailConfigurationDispatchRequest'] == null) {
            throw new runtime.RequiredError(
                'emailConfigurationDispatchRequest',
                'Required parameter "emailConfigurationDispatchRequest" was null or undefined when calling tapirmailApiEmailConfigurationDispatchUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_dispatch/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailConfigurationDispatchRequestToJSON(requestParameters['emailConfigurationDispatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationDispatchFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDispatchUpdate(requestParameters: TapirmailApiEmailConfigurationDispatchUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfigurationDispatch> {
        const response = await this.tapirmailApiEmailConfigurationDispatchUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationDuplicateRetrieveRaw(requestParameters: TapirmailApiEmailConfigurationDuplicateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationDuplicateRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/{id}/duplicate/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationDuplicateRetrieve(requestParameters: TapirmailApiEmailConfigurationDuplicateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationDuplicateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationListRaw(requestParameters: TapirmailApiEmailConfigurationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailConfigurationList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailConfigurationListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationList(requestParameters: TapirmailApiEmailConfigurationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailConfigurationList> {
        const response = await this.tapirmailApiEmailConfigurationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationPartialUpdateRaw(requestParameters: TapirmailApiEmailConfigurationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmailConfigurationRequestToJSON(requestParameters['patchedEmailConfigurationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationPartialUpdate(requestParameters: TapirmailApiEmailConfigurationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationRetrieveRaw(requestParameters: TapirmailApiEmailConfigurationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationRetrieve(requestParameters: TapirmailApiEmailConfigurationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationUpdateRaw(requestParameters: TapirmailApiEmailConfigurationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationUpdate().'
            );
        }

        if (requestParameters['emailConfigurationRequest'] == null) {
            throw new runtime.RequiredError(
                'emailConfigurationRequest',
                'Required parameter "emailConfigurationRequest" was null or undefined when calling tapirmailApiEmailConfigurationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailConfigurationRequestToJSON(requestParameters['emailConfigurationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationUpdate(requestParameters: TapirmailApiEmailConfigurationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionArchiveCreateRaw(requestParameters: TapirmailApiEmailConfigurationVersionArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionArchiveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/archive/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionArchiveCreate(requestParameters: TapirmailApiEmailConfigurationVersionArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.tapirmailApiEmailConfigurationVersionArchiveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionCreateRaw(requestParameters: TapirmailApiEmailConfigurationVersionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['bundledEmailConfigurationRequest'] == null) {
            throw new runtime.RequiredError(
                'bundledEmailConfigurationRequest',
                'Required parameter "bundledEmailConfigurationRequest" was null or undefined when calling tapirmailApiEmailConfigurationVersionCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BundledEmailConfigurationRequestToJSON(requestParameters['bundledEmailConfigurationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionCreate(requestParameters: TapirmailApiEmailConfigurationVersionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.tapirmailApiEmailConfigurationVersionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionDestroyRaw(requestParameters: TapirmailApiEmailConfigurationVersionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionDestroy(requestParameters: TapirmailApiEmailConfigurationVersionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiEmailConfigurationVersionDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionDraftCreateRaw(requestParameters: TapirmailApiEmailConfigurationVersionDraftCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionDraftCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/draft/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionDraftCreate(requestParameters: TapirmailApiEmailConfigurationVersionDraftCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.tapirmailApiEmailConfigurationVersionDraftCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionGetBundledInfoRetrieveRaw(requestParameters: TapirmailApiEmailConfigurationVersionGetBundledInfoRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundledEmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionGetBundledInfoRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/get_bundled_info/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundledEmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionGetBundledInfoRetrieve(requestParameters: TapirmailApiEmailConfigurationVersionGetBundledInfoRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundledEmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationVersionGetBundledInfoRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BundledEmailConfiguration>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BundledEmailConfigurationFromJSON));
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BundledEmailConfiguration>> {
        const response = await this.tapirmailApiEmailConfigurationVersionListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionPartialUpdateRaw(requestParameters: TapirmailApiEmailConfigurationVersionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundledEmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBundledEmailConfigurationRequestToJSON(requestParameters['patchedBundledEmailConfigurationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundledEmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionPartialUpdate(requestParameters: TapirmailApiEmailConfigurationVersionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundledEmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationVersionPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionReleaseCreateRaw(requestParameters: TapirmailApiEmailConfigurationVersionReleaseCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionReleaseCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/release/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionReleaseCreate(requestParameters: TapirmailApiEmailConfigurationVersionReleaseCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.tapirmailApiEmailConfigurationVersionReleaseCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionRetrieveRaw(requestParameters: TapirmailApiEmailConfigurationVersionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundledEmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundledEmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionRetrieve(requestParameters: TapirmailApiEmailConfigurationVersionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundledEmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationVersionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionUpdateRaw(requestParameters: TapirmailApiEmailConfigurationVersionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundledEmailConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionUpdate().'
            );
        }

        if (requestParameters['bundledEmailConfigurationRequest'] == null) {
            throw new runtime.RequiredError(
                'bundledEmailConfigurationRequest',
                'Required parameter "bundledEmailConfigurationRequest" was null or undefined when calling tapirmailApiEmailConfigurationVersionUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration_version/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BundledEmailConfigurationRequestToJSON(requestParameters['bundledEmailConfigurationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundledEmailConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionUpdate(requestParameters: TapirmailApiEmailConfigurationVersionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundledEmailConfiguration> {
        const response = await this.tapirmailApiEmailConfigurationVersionUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionsListRaw(requestParameters: TapirmailApiEmailConfigurationVersionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailConfigurationVersionList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailConfigurationVersionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_configuration/{id}/versions/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailConfigurationVersionListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailConfigurationVersionsList(requestParameters: TapirmailApiEmailConfigurationVersionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailConfigurationVersionList> {
        const response = await this.tapirmailApiEmailConfigurationVersionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailDispatchGetFailedDispatchesListRaw(requestParameters: TapirmailApiEmailDispatchGetFailedDispatchesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailDispatchList>> {
        if (requestParameters['recipient'] == null) {
            throw new runtime.RequiredError(
                'recipient',
                'Required parameter "recipient" was null or undefined when calling tapirmailApiEmailDispatchGetFailedDispatchesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['recipient'] != null) {
            queryParameters['recipient'] = requestParameters['recipient'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_dispatch/get_failed_dispatches/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailDispatchListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailDispatchGetFailedDispatchesList(requestParameters: TapirmailApiEmailDispatchGetFailedDispatchesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailDispatchList> {
        const response = await this.tapirmailApiEmailDispatchGetFailedDispatchesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailDispatchListRaw(requestParameters: TapirmailApiEmailDispatchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailDispatchWithRetriesList>> {
        const queryParameters: any = {};

        if (requestParameters['configDispatchId'] != null) {
            queryParameters['config_dispatch_id'] = requestParameters['configDispatchId'];
        }

        if (requestParameters['dispatchStatus'] != null) {
            queryParameters['dispatch_status'] = requestParameters['dispatchStatus'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_dispatch/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailDispatchWithRetriesListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailDispatchList(requestParameters: TapirmailApiEmailDispatchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailDispatchWithRetriesList> {
        const response = await this.tapirmailApiEmailDispatchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailDispatchRecipientsWithErrorsListRaw(requestParameters: TapirmailApiEmailDispatchRecipientsWithErrorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGroupedEmailDispatchList>> {
        const queryParameters: any = {};

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_dispatch/recipients_with_errors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGroupedEmailDispatchListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailDispatchRecipientsWithErrorsList(requestParameters: TapirmailApiEmailDispatchRecipientsWithErrorsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGroupedEmailDispatchList> {
        const response = await this.tapirmailApiEmailDispatchRecipientsWithErrorsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailDispatchRetrieveRaw(requestParameters: TapirmailApiEmailDispatchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailDispatch>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailDispatchRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_dispatch/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailDispatchFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailDispatchRetrieve(requestParameters: TapirmailApiEmailDispatchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailDispatch> {
        const response = await this.tapirmailApiEmailDispatchRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailDispatchRetryCreateRaw(requestParameters: TapirmailApiEmailDispatchRetryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailDispatch>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailDispatchRetryCreate().'
            );
        }

        if (requestParameters['emailDispatchRequest'] == null) {
            throw new runtime.RequiredError(
                'emailDispatchRequest',
                'Required parameter "emailDispatchRequest" was null or undefined when calling tapirmailApiEmailDispatchRetryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_dispatch/{id}/retry/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailDispatchRequestToJSON(requestParameters['emailDispatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailDispatchFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailDispatchRetryCreate(requestParameters: TapirmailApiEmailDispatchRetryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailDispatch> {
        const response = await this.tapirmailApiEmailDispatchRetryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplateCreateRaw(requestParameters: TapirmailApiEmailTemplateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['emailTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'emailTemplateRequest',
                'Required parameter "emailTemplateRequest" was null or undefined when calling tapirmailApiEmailTemplateCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateRequestToJSON(requestParameters['emailTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplateCreate(requestParameters: TapirmailApiEmailTemplateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplateCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplateDestroyRaw(requestParameters: TapirmailApiEmailTemplateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplateDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiEmailTemplateDestroy(requestParameters: TapirmailApiEmailTemplateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiEmailTemplateDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiEmailTemplateListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmailTemplate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailTemplateFromJSON));
    }

    /**
     */
    async tapirmailApiEmailTemplateList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmailTemplate>> {
        const response = await this.tapirmailApiEmailTemplateListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedCreateRaw(requestParameters: TapirmailApiEmailTemplatePaginatedCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['emailTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'emailTemplateRequest',
                'Required parameter "emailTemplateRequest" was null or undefined when calling tapirmailApiEmailTemplatePaginatedCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template_paginated/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateRequestToJSON(requestParameters['emailTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedCreate(requestParameters: TapirmailApiEmailTemplatePaginatedCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplatePaginatedCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedDestroyRaw(requestParameters: TapirmailApiEmailTemplatePaginatedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplatePaginatedDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template_paginated/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedDestroy(requestParameters: TapirmailApiEmailTemplatePaginatedDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiEmailTemplatePaginatedDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedListRaw(requestParameters: TapirmailApiEmailTemplatePaginatedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailTemplateList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template_paginated/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailTemplateListFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedList(requestParameters: TapirmailApiEmailTemplatePaginatedListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailTemplateList> {
        const response = await this.tapirmailApiEmailTemplatePaginatedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedPartialUpdateRaw(requestParameters: TapirmailApiEmailTemplatePaginatedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplatePaginatedPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template_paginated/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmailTemplateRequestToJSON(requestParameters['patchedEmailTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedPartialUpdate(requestParameters: TapirmailApiEmailTemplatePaginatedPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplatePaginatedPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedRetrieveRaw(requestParameters: TapirmailApiEmailTemplatePaginatedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplatePaginatedRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template_paginated/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedRetrieve(requestParameters: TapirmailApiEmailTemplatePaginatedRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplatePaginatedRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedUpdateRaw(requestParameters: TapirmailApiEmailTemplatePaginatedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplatePaginatedUpdate().'
            );
        }

        if (requestParameters['emailTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'emailTemplateRequest',
                'Required parameter "emailTemplateRequest" was null or undefined when calling tapirmailApiEmailTemplatePaginatedUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template_paginated/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateRequestToJSON(requestParameters['emailTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplatePaginatedUpdate(requestParameters: TapirmailApiEmailTemplatePaginatedUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplatePaginatedUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplatePartialUpdateRaw(requestParameters: TapirmailApiEmailTemplatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplatePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmailTemplateRequestToJSON(requestParameters['patchedEmailTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplatePartialUpdate(requestParameters: TapirmailApiEmailTemplatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplatePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplateRetrieveRaw(requestParameters: TapirmailApiEmailTemplateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplateRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplateRetrieve(requestParameters: TapirmailApiEmailTemplateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiEmailTemplateUpdateRaw(requestParameters: TapirmailApiEmailTemplateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiEmailTemplateUpdate().'
            );
        }

        if (requestParameters['emailTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'emailTemplateRequest',
                'Required parameter "emailTemplateRequest" was null or undefined when calling tapirmailApiEmailTemplateUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/email_template/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateRequestToJSON(requestParameters['emailTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiEmailTemplateUpdate(requestParameters: TapirmailApiEmailTemplateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.tapirmailApiEmailTemplateUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiMediaLibraryFilepondFetchRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/filepond/fetch/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiMediaLibraryFilepondFetchRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiMediaLibraryFilepondFetchRetrieveRaw(initOverrides);
    }

    /**
     * Expect the upload ID to be provided with the \'id\' parameter This may be either an upload_id that is stored in the StoredUpload table or it may be the path to a file (relative to the fixed upload directory specified by the DJANGO_DRF_FILEPOND_FILE_STORE_PATH setting parameter).
     */
    async tapirmailApiMediaLibraryFilepondLoadRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/filepond/load/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Expect the upload ID to be provided with the \'id\' parameter This may be either an upload_id that is stored in the StoredUpload table or it may be the path to a file (relative to the fixed upload directory specified by the DJANGO_DRF_FILEPOND_FILE_STORE_PATH setting parameter).
     */
    async tapirmailApiMediaLibraryFilepondLoadRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiMediaLibraryFilepondLoadRetrieveRaw(initOverrides);
    }

    /**
     * This view handles a PATCH request containing a file chunk as part of the filepond chunked upload support. The chunk will relate to an existing chunked upload configuration created when a new chunked upload request was made to the ProcessView. See: https://pqina.nl/filepond/docs/patterns/api/server/#process-chunks for details of how chunked uploads are handled in filepond. Assuming everything in the request is valid, this view will store the chunk.
     */
    async tapirmailApiMediaLibraryFilepondPatchPartialUpdateRaw(requestParameters: TapirmailApiMediaLibraryFilepondPatchPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chunkId'] == null) {
            throw new runtime.RequiredError(
                'chunkId',
                'Required parameter "chunkId" was null or undefined when calling tapirmailApiMediaLibraryFilepondPatchPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/filepond/patch/{chunk_id}`.replace(`{${"chunk_id"}}`, encodeURIComponent(String(requestParameters['chunkId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This view handles a PATCH request containing a file chunk as part of the filepond chunked upload support. The chunk will relate to an existing chunked upload configuration created when a new chunked upload request was made to the ProcessView. See: https://pqina.nl/filepond/docs/patterns/api/server/#process-chunks for details of how chunked uploads are handled in filepond. Assuming everything in the request is valid, this view will store the chunk.
     */
    async tapirmailApiMediaLibraryFilepondPatchPartialUpdate(requestParameters: TapirmailApiMediaLibraryFilepondPatchPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiMediaLibraryFilepondPatchPartialUpdateRaw(requestParameters, initOverrides);
    }

    /**
     * This view receives an uploaded file from the filepond client. It stores the file in a temporary location and generates a unique ID which it associates with the temporary upload. The unique ID is returned to the client. If and when the parent form is finally submitted, the unique ID is provided and the file is then moved from the temporary store into permanent storage in line with the requirements of the parent application.
     */
    async tapirmailApiMediaLibraryFilepondProcessCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/filepond/process/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This view receives an uploaded file from the filepond client. It stores the file in a temporary location and generates a unique ID which it associates with the temporary upload. The unique ID is returned to the client. If and when the parent form is finally submitted, the unique ID is provided and the file is then moved from the temporary store into permanent storage in line with the requirements of the parent application.
     */
    async tapirmailApiMediaLibraryFilepondProcessCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiMediaLibraryFilepondProcessCreateRaw(initOverrides);
    }

    /**
     */
    async tapirmailApiMediaLibraryFilepondRestoreRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/filepond/restore/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiMediaLibraryFilepondRestoreRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiMediaLibraryFilepondRestoreRetrieveRaw(initOverrides);
    }

    /**
     */
    async tapirmailApiMediaLibraryFilepondRevertDestroyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/filepond/revert/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiMediaLibraryFilepondRevertDestroy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiMediaLibraryFilepondRevertDestroyRaw(initOverrides);
    }

    /**
     */
    async tapirmailApiMissingTriggersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MissingTrigger>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/missing_triggers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MissingTriggerFromJSON));
    }

    /**
     */
    async tapirmailApiMissingTriggersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MissingTrigger>> {
        const response = await this.tapirmailApiMissingTriggersListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of available filters.
     */
    async tapirmailApiSegmentAvailableFiltersRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TapirmailApiSegmentAvailableFiltersRetrieve200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/segment/available_filters/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TapirmailApiSegmentAvailableFiltersRetrieve200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of available filters.
     */
    async tapirmailApiSegmentAvailableFiltersRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TapirmailApiSegmentAvailableFiltersRetrieve200Response> {
        const response = await this.tapirmailApiSegmentAvailableFiltersRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of available segments.
     */
    async tapirmailApiSegmentAvailableSegmentsRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TapirmailApiSegmentAvailableSegmentsRetrieve200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/segment/available_segments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TapirmailApiSegmentAvailableSegmentsRetrieve200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of available segments.
     */
    async tapirmailApiSegmentAvailableSegmentsRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TapirmailApiSegmentAvailableSegmentsRetrieve200Response> {
        const response = await this.tapirmailApiSegmentAvailableSegmentsRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Combine segments and filters and get the result.
     */
    async tapirmailApiSegmentCombineCreateRaw(requestParameters: TapirmailApiSegmentCombineCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TapirmailApiSegmentCombineCreate200Response>> {
        if (requestParameters['segmentDataRequest'] == null) {
            throw new runtime.RequiredError(
                'segmentDataRequest',
                'Required parameter "segmentDataRequest" was null or undefined when calling tapirmailApiSegmentCombineCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/segment/combine/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SegmentDataRequestToJSON(requestParameters['segmentDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TapirmailApiSegmentCombineCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Combine segments and filters and get the result.
     */
    async tapirmailApiSegmentCombineCreate(requestParameters: TapirmailApiSegmentCombineCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TapirmailApiSegmentCombineCreate200Response> {
        const response = await this.tapirmailApiSegmentCombineCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentCreateRaw(requestParameters: TapirmailApiStaticSegmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegment>> {
        if (requestParameters['staticSegmentRequest'] == null) {
            throw new runtime.RequiredError(
                'staticSegmentRequest',
                'Required parameter "staticSegmentRequest" was null or undefined when calling tapirmailApiStaticSegmentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StaticSegmentRequestToJSON(requestParameters['staticSegmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentCreate(requestParameters: TapirmailApiStaticSegmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegment> {
        const response = await this.tapirmailApiStaticSegmentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentDestroyRaw(requestParameters: TapirmailApiStaticSegmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiStaticSegmentDestroy(requestParameters: TapirmailApiStaticSegmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiStaticSegmentDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiStaticSegmentListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StaticSegment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaticSegmentFromJSON));
    }

    /**
     */
    async tapirmailApiStaticSegmentList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StaticSegment>> {
        const response = await this.tapirmailApiStaticSegmentListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentPartialUpdateRaw(requestParameters: TapirmailApiStaticSegmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStaticSegmentRequestToJSON(requestParameters['patchedStaticSegmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentPartialUpdate(requestParameters: TapirmailApiStaticSegmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegment> {
        const response = await this.tapirmailApiStaticSegmentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientCreateRaw(requestParameters: TapirmailApiStaticSegmentRecipientCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegmentRecipient>> {
        if (requestParameters['staticSegmentRecipientRequest'] == null) {
            throw new runtime.RequiredError(
                'staticSegmentRecipientRequest',
                'Required parameter "staticSegmentRecipientRequest" was null or undefined when calling tapirmailApiStaticSegmentRecipientCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment_recipient/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StaticSegmentRecipientRequestToJSON(requestParameters['staticSegmentRecipientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentRecipientFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientCreate(requestParameters: TapirmailApiStaticSegmentRecipientCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegmentRecipient> {
        const response = await this.tapirmailApiStaticSegmentRecipientCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientDestroyRaw(requestParameters: TapirmailApiStaticSegmentRecipientDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentRecipientDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment_recipient/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientDestroy(requestParameters: TapirmailApiStaticSegmentRecipientDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiStaticSegmentRecipientDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StaticSegmentRecipient>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment_recipient/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaticSegmentRecipientFromJSON));
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StaticSegmentRecipient>> {
        const response = await this.tapirmailApiStaticSegmentRecipientListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientPartialUpdateRaw(requestParameters: TapirmailApiStaticSegmentRecipientPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegmentRecipient>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentRecipientPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment_recipient/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStaticSegmentRecipientRequestToJSON(requestParameters['patchedStaticSegmentRecipientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentRecipientFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientPartialUpdate(requestParameters: TapirmailApiStaticSegmentRecipientPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegmentRecipient> {
        const response = await this.tapirmailApiStaticSegmentRecipientPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientRetrieveRaw(requestParameters: TapirmailApiStaticSegmentRecipientRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegmentRecipient>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentRecipientRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment_recipient/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentRecipientFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientRetrieve(requestParameters: TapirmailApiStaticSegmentRecipientRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegmentRecipient> {
        const response = await this.tapirmailApiStaticSegmentRecipientRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientUpdateRaw(requestParameters: TapirmailApiStaticSegmentRecipientUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegmentRecipient>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentRecipientUpdate().'
            );
        }

        if (requestParameters['staticSegmentRecipientRequest'] == null) {
            throw new runtime.RequiredError(
                'staticSegmentRecipientRequest',
                'Required parameter "staticSegmentRecipientRequest" was null or undefined when calling tapirmailApiStaticSegmentRecipientUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment_recipient/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StaticSegmentRecipientRequestToJSON(requestParameters['staticSegmentRecipientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentRecipientFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentRecipientUpdate(requestParameters: TapirmailApiStaticSegmentRecipientUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegmentRecipient> {
        const response = await this.tapirmailApiStaticSegmentRecipientUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentRetrieveRaw(requestParameters: TapirmailApiStaticSegmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentRetrieve(requestParameters: TapirmailApiStaticSegmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegment> {
        const response = await this.tapirmailApiStaticSegmentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiStaticSegmentUpdateRaw(requestParameters: TapirmailApiStaticSegmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticSegment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiStaticSegmentUpdate().'
            );
        }

        if (requestParameters['staticSegmentRequest'] == null) {
            throw new runtime.RequiredError(
                'staticSegmentRequest',
                'Required parameter "staticSegmentRequest" was null or undefined when calling tapirmailApiStaticSegmentUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/static_segment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StaticSegmentRequestToJSON(requestParameters['staticSegmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticSegmentFromJSON(jsonValue));
    }

    /**
     */
    async tapirmailApiStaticSegmentUpdate(requestParameters: TapirmailApiStaticSegmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticSegment> {
        const response = await this.tapirmailApiStaticSegmentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiTokensGetTokensRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/tokens/get_tokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiTokensGetTokensRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tapirmailApiTokensGetTokensRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tapirmailApiTrackingTrackRetrieveRaw(requestParameters: TapirmailApiTrackingTrackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tapirmailApiTrackingTrackRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/tracking/{id}/track/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tapirmailApiTrackingTrackRetrieve(requestParameters: TapirmailApiTrackingTrackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tapirmailApiTrackingTrackRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tapirmailApiTriggerTokensGetTokensRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/trigger_tokens/get_tokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tapirmailApiTriggerTokensGetTokensRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tapirmailApiTriggerTokensGetTokensRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of available triggers.
     */
    async tapirmailApiTriggersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TriggerDefinition>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/triggers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TriggerDefinitionFromJSON));
    }

    /**
     * Get a list of available triggers.
     */
    async tapirmailApiTriggersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TriggerDefinition>> {
        const response = await this.tapirmailApiTriggersListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async temporaryuploadsCreateRaw(requestParameters: TemporaryuploadsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryUpload>> {
        if (requestParameters['temporaryUploadRequest'] == null) {
            throw new runtime.RequiredError(
                'temporaryUploadRequest',
                'Required parameter "temporaryUploadRequest" was null or undefined when calling temporaryuploadsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/temporary_upload/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemporaryUploadRequestToJSON(requestParameters['temporaryUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryUploadFromJSON(jsonValue));
    }

    /**
     */
    async temporaryuploadsCreate(requestParameters: TemporaryuploadsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryUpload> {
        const response = await this.temporaryuploadsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async temporaryuploadsDestroyRaw(requestParameters: TemporaryuploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling temporaryuploadsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/temporary_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async temporaryuploadsDestroy(requestParameters: TemporaryuploadsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.temporaryuploadsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async temporaryuploadsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TemporaryUpload>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/temporary_upload/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemporaryUploadFromJSON));
    }

    /**
     */
    async temporaryuploadsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TemporaryUpload>> {
        const response = await this.temporaryuploadsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async temporaryuploadsPartialUpdateRaw(requestParameters: TemporaryuploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryUpload>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling temporaryuploadsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/temporary_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTemporaryUploadRequestToJSON(requestParameters['patchedTemporaryUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryUploadFromJSON(jsonValue));
    }

    /**
     */
    async temporaryuploadsPartialUpdate(requestParameters: TemporaryuploadsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryUpload> {
        const response = await this.temporaryuploadsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async temporaryuploadsRetrieveRaw(requestParameters: TemporaryuploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryUpload>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling temporaryuploadsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/temporary_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryUploadFromJSON(jsonValue));
    }

    /**
     */
    async temporaryuploadsRetrieve(requestParameters: TemporaryuploadsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryUpload> {
        const response = await this.temporaryuploadsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async temporaryuploadsUpdateRaw(requestParameters: TemporaryuploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryUpload>> {
        if (requestParameters['uploadId'] == null) {
            throw new runtime.RequiredError(
                'uploadId',
                'Required parameter "uploadId" was null or undefined when calling temporaryuploadsUpdate().'
            );
        }

        if (requestParameters['temporaryUploadRequest'] == null) {
            throw new runtime.RequiredError(
                'temporaryUploadRequest',
                'Required parameter "temporaryUploadRequest" was null or undefined when calling temporaryuploadsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tapirmail/api/media_library/temporary_upload/{upload_id}/`.replace(`{${"upload_id"}}`, encodeURIComponent(String(requestParameters['uploadId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemporaryUploadRequestToJSON(requestParameters['temporaryUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryUploadFromJSON(jsonValue));
    }

    /**
     */
    async temporaryuploadsUpdate(requestParameters: TemporaryuploadsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryUpload> {
        const response = await this.temporaryuploadsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
